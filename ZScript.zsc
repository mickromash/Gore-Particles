Version "4.0"

Const MRGP_MaxWounds = 20;

Class MR_GoreParticlesHandler: EventHandler
{
	Double Dif(Double a, Double b)
	{
		if(a>b)Return a-b;
		
		Return b-a;
	}
	
	Array<Actor> Wounded;
	Array<MR_GoreParticlesWound> Wounds;
	
	Static Bool MRGPartsDraw()
	{
		if(!Players[ConsolePlayer].Camera)Return false;
		Return CVar.GetCVar("MRGoreParts_Draw", Players[ConsolePlayer]).GetBool();
	}
	
	Static Void MRParticleBloodSplash(Actor mo = Null, Double Angle = 0, Double Pitch = 0, int Amount = 1, Color Col = 0, int Typ = 0, Double Scale=1, Vector3 Offset = (0,0,0))
	{
		if(!MRGPartsDraw())Return;
		
		Amount *= CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
		
		Float Dist = 1;
		Dist *= 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0025;
		//if(Typ==2)Return;
		//Typ=4;
		Switch(Typ)
		{
			Case 0://"Explode"
				For(int i=0;i<Amount;i++)
				{
					
					
					Float Mult = Random(0, 3)*3+1;
					For(float i1=0;i1<Mult;i1++)
					{
						Double Ang = Random(0, 360);
						Double Leng = FRandom(0, .3);
						Vector3 Strn = (FRandom(.1, 1), Cos(Ang)*Leng, Sin(Ang)*Leng);
						Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
						Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
						Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
						
						Vel *= Dist;
						Vel *= Scale;
						
						Float Life = Min(45, 10/Strn.Length())*Scale;
						Double Size = FRandom(.9, 3)*Dist*1.5*Scale;
						Vector3 Accel = -Vel*FRandom(.004, .01);
						
						
						
						Float Bright = Max(.5, Min(2, 1.5+Vel.Z*1.5));
						Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
						Vector3 Ofst = Vel;
						Ofst *= Mult/(i1+1);
						
						mo.A_SpawnParticle(ColTmp, 0, Life, Size, 0, Ofst.X*FRandom(.3, .7)+Offset.X,Ofst.Y*FRandom(.3, .7)+Offset.Y,5+Ofst.Z*FRandom(.3, .7)+Offset.Z,
							Vel.X, Vel.Y, Vel.Z, Accel.X, Accel.Y, Accel.Z, 1, 0, -(Size/Life));
					}
				}
				Break;
			Case 1://Drops with trails	NEEDS REWORK
				For(int i=0;i<Amount;i++)
				{
					Angle += FRandom(-7, 7);
					Float PitchRand = FRandom(-5, 5);
					Double Strn = FRandom(1, 1.6);
					
					Vector3 Vel = (Actor.AngleToVector(Angle, Strn)*Cos(Abs(Pitch+PitchRand)), -Sin(Pitch+PitchRand)*Strn);
					Vel.XY += Actor.AngleToVector(Angle+90+PitchRand, Sin(Angle)*Strn)*-Sin(Pitch+PitchRand);
					
					Vel.Z += .4;
					
					Vel *= Dist;
					
					Double Size = FRandom(1.9, 2.5)*Dist*1.5;
					Double Life = FRandom(20, 25);
					
					
					
					For(float j=0;j>-3;j-=.5)
					{
						Float Bright = Max(.5, Min(2, 1.5+Vel.Z+j*.5));
						Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
					
						mo.A_SpawnParticle(ColTmp, 0, Life, Size+j/6, 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
							Vel.X, Vel.Y, Vel.Z, 0,0,-.05+(-j/6*(-j/6))*.02, 1, 0, -(Size/Life));
						Life+=1;
					}
				}
				Break;
			Case 2://Mist
				if(!CVar.GetCVar("MRGoreParts_BloodMist", Players[ConsolePlayer]).GetBool())Break;
				For(int i=0;i<Amount;i++)
				{
					Vector3 Strn = (FRandom(.05, .2), FRandom(-.3, .3), FRandom(-.3, .3));
					Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
					Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
					Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
					
					Vel *= Dist;
					
					Float Life = Min(50, 11/Strn.Length());
					Double Size = FRandom(3, 6)*Dist*1.5;
					Vector3 Accel = -Vel*FRandom(.004, .01);
					
					Float Bright = FRandom(.9, 1.4);
					Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
					
					Float Alpha = FRandom(.2, .4);
					
					mo.A_SpawnParticle(ColTmp, 0, Life, Size, 0, 0+Offset.X,0+Offset.Y,5+Offset.Z,
						Vel.X, Vel.Y, Vel.Z, Accel.X, Accel.Y, Accel.Z, Alpha, Alpha/Life, .25);
				}
				Break;
			Case 3://"Beautiful" spray
				{
					Pitch -= FRandom(5, 8);
					Angle += Random(-30, 30);
					Double Forw = FRandom(1.4, 3);
					Vector3 Strn;
					Double Size = FRandom(1.2, 1.6)*Dist*1.5;
					Double Life = FRandom(35, 40);
										
					Float Bright = FRandom(.9, 2);
					
					
					For(float j=.1;j<1.1;j+=.025)
					{
						Double Ang = Random(0, 360);
						Double Leng = FRandom(0, .1*j);
						Strn.X = Forw*j*.5;
						Strn.Y = -Cos(Ang)*Leng;
						Strn.Z = -Sin(Ang)*Leng;
						Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
						Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
						Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
						
						Color ColTmp = Color(int(Col.R*(Strn.Z/(.3*j)+.75)*2), int(Col.G*(Strn.Z/(.3*j)+.75)*2), int(Col.B*(Strn.Z/(.3*j)+.75)*2));
						Vel *= Dist;
						Vel *= Scale;
						
						Vector3 Accel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
						Accel *= FRandom(.01, .02);
						Accel.XY += Actor.AngleToVector(Angle+90, -Strn.Y*.1);
						Accel.XY += Actor.AngleToVector(Angle, -Strn.Z)*Sin(Pitch);
						
						Accel = -Accel;
						Accel *= Dist;
						Accel *= Scale;
						
						
						mo.A_SpawnParticle(ColTmp, 0, Life+5, (Size+j*3)*FRandom(.9, 1.1), 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
							Vel.X, Vel.Y, Vel.Z, Accel.X,Accel.Y,Accel.Z-(j-.1)*.01, 1, 0, -((Size+j*3)/Life));
						Life-=.5;
					}
				}
				Break;
			Case 4://
				{
					Pitch -= Random(5, 40);
					//Angle += Random(-15, 15);
					Double Forw = FRandom(.6, 1);
					Vector3 Strn = (FRandom(.3, 1.2),0,0);
					Double Size = FRandom(2.8, 3.3)*Dist*1.5;
					Double Life = FRandom(25, 30);
										
					
					
					Double Roll = Random(175, 360);
					
					For(float j=-Random(70, 160);j<Random(80, 200);j+=FRandom(2.7, 3.3))
					{
						Double Ang = Angle+(j+FRandom(-1.5, 1.5))*Cos(Roll);
						Double Pit = Pitch+(j+FRandom(-1.5, 1.5))*Sin(Roll);
						
						Vector3 Vel = (Actor.AngleToVector(Ang, Strn.X)*Cos(-Abs(Pit)), -Sin(Pit)*Strn.X);
						Vel += (Actor.AngleToVector(-Angle, Forw)*Cos(Abs(Pitch)), -Sin(Pitch)*Forw);
						Vel.XY += Actor.AngleToVector(Ang, Strn.X)*Sin(Pit);
						//Vel.XY += Actor.AngleToVector(Ang+90, Strn.Y);
						//Vel.XY += Actor.AngleToVector(Ang, Strn.Z)*Sin(Pit);
						Float Bright = Max(.5, Min(2, 1.2+Sin(-Pit)*.5));
						Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
						
						mo.A_SpawnParticle(ColTmp, 0, Life+5, Size*FRandom(.9, 1.1), 0, FRandom(-.5,.5),FRandom(-.5,.5),FRandom(-.5,.5),//Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
							Vel.X, Vel.Y, Vel.Z, FRandom(-.001,.001),FRandom(-.001,.001),FRandom(-.001,.001)-.025+Vel.Z*.01 /*Accel.X,Accel.Y,Accel.Z-(j-.1)*.01*/, 1, 0, -(Size/Life));
						//Life-=.5;
					}
				}
				Break;
			}
	}
	
	
	
	
	Array<String> Monsters;
	Color Colors[40];
	
	/*
		MRPRTCOL (MickRomash's gore PaRTiCle COLours) lump stores information
		about blood colours for specific monster classes
		
		Syntax:
		MonsterClassName (R G B)
		
		example:
		HellKnight (0 90 0)
		Cacodemon (0 0 120)
	*/
	
	Override Void OnRegister()
	{
		int LumpNum = 0;
		While(LumpNum>-1)
		{
			int TempLump = Wads.FindLump("MRPRTCOL", LumpNum+1);
			if(TempLump==-1)Break;
			else LumpNum = TempLump;
		}
		
		String Lump = Wads.ReadLump(LumpNum);
		Lump.Replace("\n", "");
		While(Lump.IndexOf("(")>-1)
		{
			Monsters.Push(Lump.Left(Lump.IndexOf(" ")));

			String Cols = Lump.Mid(Lump.IndexOf("("), Lump.IndexOf(")")).." ";
			int Vals[3];
			
			For(int i=0;i<3;i++)
			{
				String Temp = Cols.Left(Cols.IndexOf(" "));
				Vals[i] = Temp.ToInt();
				Cols = Cols.Mid(Cols.IndexOf(" ")+1);
			}
			
			Colors[Monsters.Size()-1] = Color(Vals[0], Vals[1], Vals[2]);
			
			Lump = Lump.Mid(Lump.IndexOf(")")+2);
		}
		if(MRGoreParts_Debug)For(int i=0;i<Monsters.Size();i++)Console.Printf(Monsters[i].." "..Colors[i]);
	}
	
	
	
	Override Void WorldThingDamaged(WorldEvent e)
	{
		if((e.Thing.bIsMonster||e.Thing Is 'PlayerPawn') && !(e.Thing.bNoBlood && MRGoreParts_NoBloodMonsters))
		{
			String Damage = "";
			if(e.DamageFlags&DMG_EXPLOSION)Damage = Damage.."Explosion|";
			if(e.DamageFlags&DMG_USEANGLE)Damage = Damage.."Use_Angle|";
			if(e.DamageFlags&DMG_INFLICTOR_IS_PUFF)Damage = Damage.."IsPuff|";
			if(MRGoreParts_Debug)Console.Printf("Damage: "..e.DamageType.." Flags: "..Damage);
			if(MRGoreParts_Debug && e.DamageSource)Console.Printf("Source: "..e.DamageSource.GetClassName().." "..e.DamageSource.Pos);
			if(MRGoreParts_Debug && e.Inflictor && e.Inflictor!=e.DamageSource)Console.Printf("Inflictor: "..e.Inflictor.GetClassName().." "..e.Inflictor.Pos);
			
			if(e.Inflictor)
			{
				//Console.Printf("\cdHealth: \c-"..e.Thing.Health.." \cgDamage: \c-"..e.Damage);
				//Console.Printf("Damage: "..e.DamageType.." Flags: "..Damage);
				Float Amount = CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
				
				Color Col = e.Thing.BloodColor;
				if(CVar.GetCVar("MRGoreParts_UseCustomColor", Players[ConsolePlayer]).GetBool())
				{
					Col = CVar.GetCVar("MRGoreParts_Color", Players[ConsolePlayer]).GetInt();
				}
				else
				{
					if(e.Thing.BloodColor==0 && e.Thing.BloodTranslation==0)Col = GameInfo.defaultbloodcolor;
					For(int i=0;i<Monsters.Size();i++)
					{
						if(Monsters[i]==e.Thing.GetClassName())
						{
							Col = Colors[i];
							Break;
						}
					}
				}
				
				if(Random(0, 10)>4 && MRGoreParts_Wounds && !PlayerPawn(e.Thing))
				{
					MR_GoreParticlesWound Token;
					if(Wounded.Find(e.Thing)==Wounded.Size())
					{
						Wounded.Push(e.Thing);
						MR_GoreParticlesWound a = New('MR_GoreParticlesWound');
						a.Owner = e.Thing;
						Wounds.Push(a);
						Token = a;
					}
					else
					{
						For(int i=0;i<Wounds.Size();i++)
						{
							if(!Wounds[i]||Wounds[i].bDestroyed)Continue;
							if(Wounds[i].Owner==e.Thing){Token = Wounds[i];Break;}
						}
					}
					
					Token.Col = Col;
					
					if(e.Inflictor != e.Thing && e.Inflictor != e.DamageSource)
					{
						Bool Replace = true;
						For(int i=0;i<Token.Ages.Size();i++)
						{
							if(Token.Ages[i]<1)
							{
								if(MRGoreParts_Debug)Console.Printf("\cdTarget pos:\cc "..e.Thing.Pos.XY.."\cg inflict pos:\cc "..e.Inflictor.Pos.XY);
								Vector3 Dif = LevelLocals.Vec3Diff(e.Inflictor.Pos, e.Thing.Pos);
				
								Vector3 Home = (0, 0, 0);
								
								Home.Y -= Dif.X*Cos(e.Thing.Angle-90) + Dif.Y*Sin(e.Thing.Angle-90);
								Home.X -= Dif.X*Cos(e.Thing.Angle) + Dif.Y*Sin(e.Thing.Angle);
								
								Home.XY *= .75;
								
								Home.X *= abs(Cos(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));
								Home.Y *= abs(Sin(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));

								Home.Z = -Dif.Z+5;
								
								Token.Locs[i]=Home;
								Token.Angles[i]=e.Thing.AngleTo(e.Inflictor);
								Token.Ages[i]=35*15;
								Replace = false;
								Break;
							}
						}
						if(Replace)
						{
							if(MRGoreParts_Debug)Console.Printf("Targ "..e.Thing.Pos.XY.." inf "..e.Inflictor.Pos.XY);
							Vector3 Dif = LevelLocals.Vec3Diff(e.Inflictor.Pos, e.Thing.Pos);
			
							Vector3 Home = (0, 0, 0);
							
							Home.Y -= Dif.X*Cos(e.Thing.Angle-90) + Dif.Y*Sin(e.Thing.Angle-90);
							Home.X -= Dif.X*Cos(e.Thing.Angle) + Dif.Y*Sin(e.Thing.Angle);
							
							Home.XY *= .75;
							
							Home.X *= abs(Cos(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));
							Home.Y *= abs(Sin(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));

							Home.Z = -Dif.Z+5;
							
							Token.Locs[0]=Home;
							Token.Angles[0]=e.Thing.AngleTo(e.Inflictor);
							Token.Ages[0]=35*15;
						}
					}
					else
					{
						Array<int> Ages;
						For(int i=0;i<Token.Ages.Size();i++)
						{
							if(Token.Ages[i]>0)
							{
								Ages.Push(i);
							}
						}
						
						if(Ages.Size()>0)Token.Ages[Ages[Random(0, Ages.Size()-1)]]=1;
						
						else
						{
							Token.Ages[0]=35*15;
							Token.Locs[0]=(Actor.AngleToVector(Random(0, 360), e.Thing.Radius*.3), Random(5, e.Thing.Height));
						}
					}
				}
				
				if(e.Inflictor != e.Thing)
				{
					int SplashType = Random(1, 8);
					if(!e.DamageSource)Return;
					Double Pitch = 0;
					if(e.DamageSource && e.DamageSource.Player)Pitch = e.Inflictor.PitchTo(e.DamageSource, 5, e.DamageSource.Player.ViewZ-e.DamageSource.Pos.Z);
					else if(e.DamageSource)Pitch = e.Inflictor.PitchTo(e.DamageSource, 0, e.DamageSource.Height*.9);
					
					Switch(SplashType)
					{
						Case 0:
							MRParticleBloodSplash(e.Inflictor, e.Inflictor.AngleTo(e.DamageSource), Pitch, Random(14, 19), Col, 1);
							Break;
						Case 1:
						Case 2:
						Case 3:
							MRParticleBloodSplash(e.Inflictor, e.Inflictor.AngleTo(e.DamageSource), Pitch, Random(10, 15), Col, 0);
							Break;
						Case 4:
						Case 5:
						Case 6:
						Case 7:
							MRParticleBloodSplash(e.Inflictor, e.Inflictor.AngleTo(e.DamageSource), Pitch, 1, Col, 3);
							Break;
						Case 8:
							MRParticleBloodSplash(e.Inflictor, e.Inflictor.AngleTo(e.DamageSource), Pitch, 1, Col, 4);
							Break;
					}
					MRParticleBloodSplash(e.Inflictor, e.Inflictor.AngleTo(e.DamageSource), Pitch, Random(0, 4)*2, Col, 2);
					
					For(int i=Random(0, 10)*Amount;i<20*Amount;i++)
					{
						Float Dist = 1;
						if(e.DamageSource)Dist *= 1+(e.Inflictor.Distance3D(e.DamageSource)-80)*.0025;
						Float Size = FRandom(.8, 1.6)*Dist*1.5;
						Float Pitch = e.Inflictor.Pos.Z/e.Thing.Height+Random(10, 20);
						if(e.Inflictor is 'BulletPuff' && e.DamageSource)Pitch = e.DamageSource.Pitch+Random(10, 20);
						Float Ang = Random(175, 185);
						Float Angle = e.Inflictor.AngleTo(e.Thing)+Ang;
						if(e.Inflictor is 'BulletPuff' && e.DamageSource)Angle = e.Inflictor.AngleTo(e.DamageSource)+180+Ang;
						Vector3 Ofst = (Actor.AngleToVector(Angle, 1)*abs(Cos(Pitch)), Sin(Pitch))*Dist;
								
						if(i%2==0 && MRGPartsDraw() && CVar.GetCVar("MRGoreParts_DripOnImpact", Players[ConsolePlayer]).GetBool())
						{
							Ang = Random(140, 220)*Dist;
							Angle = e.Inflictor.AngleTo(e.Thing)+Ang;
							if(e.Inflictor is 'BulletPuff' && e.DamageSource)Angle = e.Inflictor.AngleTo(e.DamageSource)+180+Ang;
							Float Bright = FRandom(1, 2);
							Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
							e.Inflictor.A_SpawnParticle(ColTmp, 0, Random(29, 40), Size*1.3, 0, Ofst.X*2,Ofst.Y*2,5,
									0,0,FRandom(0, 1), 0,0,-.2, 1, 0, -Size/40);
						}
						if(Random(0, 100)>98)
						{
							Float Bright = FRandom(1, 2);
							/*if(MRGoreParts_Multiplayer)
							{
								MR_GoreParticlesFlyingBloodMultiplayer a = MR_GoreParticlesFlyingBloodMultiplayer(e.Inflictor.Spawn("MR_GoreParticlesFlyingBloodMultiplayer", e.Inflictor.Pos));
								a.Col = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
								a.Vel3DFromAngle(Random(3, 5), e.Inflictor.Angle+Random(-50, 50), -Random(60, 90));
							}
							else
							{*/
							MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(e.Inflictor.Spawn("MR_GoreParticlesFlyingBlood", e.Inflictor.Pos));
							a.Col = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
							a.Vel3DFromAngle(Random(4, 6), e.Inflictor.AngleTo(e.DamageSource)+Random(-50, 50), -Random(0, 60));
							a.Scale *= FRandom(1, 2);
							//}
						}
					}
				}
			}
		}
	}
	
	Override Void WorldThingDied(WorldEvent e)
	{
		if(!e.Thing||!(e.Thing.bIsMonster || e.Thing is 'PlayerPawn')||(e.Thing.bNoBlood && MRGoreParts_NoBloodMonsters))Return;
		
		Color Col = e.Thing.BloodColor;
		if(CVar.GetCVar("MRGoreParts_UseCustomColor", Players[ConsolePlayer]).GetBool())
		{
			Col = CVar.GetCVar("MRGoreParts_Color", Players[ConsolePlayer]).GetInt();
		}
		else
		{
			if(e.Thing.BloodColor==0 && e.Thing.BloodTranslation==0)Col = GameInfo.defaultbloodcolor;
			For(int i=0;i<Monsters.Size();i++)
			{
				if(Monsters[i]==e.Thing.GetClassName())
				{
					Col = Colors[i];
					Break;
				}
			}
		}
		
		Float Amount = CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();

		if(e.Thing.FindState("XDeath") && e.Thing.Health<-GetDefaultByType(e.Thing.GetClass()).Health)
		{
			Vector2 Angle = (0, 360);
			
			if(e.Inflictor)Angle = (e.Thing.AngleTo(e.Inflictor)+40, e.Thing.AngleTo(e.Inflictor)+300);
			
			
			
			For(Float y=0;y<e.Thing.Height;y+=e.Thing.Height/(6*Amount))
			{
				if(MRGPartsDraw())For(float i=Angle.X;i<Angle.Y;i+=Dif(Angle.X, Angle.Y)/(50*Amount))
				{
					Float Bright = FRandom(1, 2);
					Float Life = Random(60, 90);
					Float Vel = FRandom(1, 4);
					Float Size = Random(1, 6);
					e.Thing.A_SpawnParticle(Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright)), 0, Life, Size, 0, Cos(i)*2, Sin(i)*2, y+5,
						Vel*Cos(i), Vel*Sin(i), Random(1, 5), 0,0,-FRandom(.2, .4), FRandom(.8, 1.5), 0, Size/Life);
				}
			}
			
			if(MRGPartsDraw())For(int i=0;i<e.Thing.Height*2*Amount;i++)
			{
				Float Bright = FRandom(1, 2);
				e.Thing.A_SpawnParticle(Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright)), SPF_RELATIVE, 40, Random(2, 5), Random(0, 360), FRandom(0, e.Thing.Radius), 0, Random(5, e.Thing.Height),
					Random(-1, 1),0,FRandom(0, 2), 0,0,-FRandom(.3, .4), 1, 0, -FRandom(.006, .01));
			}
			
			if(MRGPartsDraw() && CVar.GetCVar("MRGoreParts_FloorSpots", Players[ConsolePlayer]).GetInt()>1)For(float i=Angle.X;i<Angle.Y;i+=Dif(Angle.X, Angle.Y)/100*Amount)
			{
				Float Bright = FRandom(1, 2);
				e.Thing.A_SpawnParticle(Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright)), SPF_RELPOS, CVar.GetCVar("MRGoreParts_SpotsTime", Players[ConsolePlayer]).GetInt()*35, Random(1, 3), i, Random(1, 60), 0, 1);
			}
		}
		else if(Random(0, 10)>2)
		{
			MR_GoreParticlesDeathHandler a = New('MR_GoreParticlesDeathHandler');
			a.Owner = e.Thing;
			a.Bld = Col;
			if(Random(0, 10)==5)a.Artery = true;
		}
	}
	
	Override Void WorldThingSpawned(WorldEvent e)
	{
		if(MRGoreParts_OnlyModsBlood && (e.Thing is 'Blood'||Actor.GetReplacee("Blood") == e.Thing.GetClass()))
		{
			Color Col = Gameinfo.DefaultBloodColor;
			if(CVar.GetCVar("MRGoreParts_UseCustomColor", Players[ConsolePlayer]).GetBool())
			{
				Col = CVar.GetCVar("MRGoreParts_Color", Players[ConsolePlayer]).GetInt();
			}
			
			if(CVar.GetCVar("MRGoreParts_Quake2", Players[ConsolePlayer]).GetBool())
				For(Int i=0;i<Random(6, 9)*CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();i++)
				{
					Float Bright = FRandom(.6, 2);
					E.Thing.A_SpawnParticle(Color(int(col.r*Bright), int(col.g*Bright), int(col.b*Bright)), SPF_RelVel, 25, FRandom(1.5, 2.5), e.Thing.AngleTo(Players[ConsolePlayer].Camera),
						Xoff:FRandom(-1.5, 1.5), FRandom(-1.5, 1.5), FRandom(4, 7), .1,0,.5, 0,0,-.05);
				}
			
			if(MRGoreParts_OnlyModsBlood>1){e.Thing.Destroy();Return;}
			
			e.Thing.A_SetRenderStyle(0, STYLE_NONE);
		}
	}
}

Class MR_GoreParticlesWound: Thinker
{
	Vector3 Locs[MRGP_MaxWounds];
	float Ages[MRGP_MaxWounds];
	Double Angles[MRGP_MaxWounds];
	Double Heights[MRGP_MaxWounds];
	Color Col;
	Actor Owner;
	
	Bool MRGPartsDraw()
	{
		if(!Players[ConsolePlayer].Camera)Return false;
		Return CVar.GetCVar("MRGoreParts_Draw", Players[ConsolePlayer]).GetBool();
	}
	
	Override Void Tick()
	{
		if(!Owner){Destroy();Return;}
		TextureID Sprt = Owner.CurState.GetSpriteTexture(0);//Abs(Round(Actor.DeltaAngle(Owner.AngleTo(Players[ConsolePlayer].Camera), Owner.Angle)*2.07/24)));
		//Console.Printf(""..(Actor.DeltaAngle(Owner.AngleTo(Players[ConsolePlayer].Camera), Owner.Angle)*1.07/24));
		//if(!Sprt.IsValid())Sprt = Owner.CurState.GetSpriteTexture(0);
		
		if(!Sprt.IsValid())Return;
		
		Float Z = Texman.CheckRealHeight(Sprt);
		Z *= Owner.Scale.Y;
		Vector2 Size = Texman.GetScaledOffset(Sprt);
		
		Double Angle = Owner.Angle;
		if(Owner.Health<1 && !MRGoreParts_Voxel)
			Angle = Owner.AngleTo(Players[ConsolePlayer].Camera);
		
		For(int i=0;i<Locs.Size();i++)
		{
			if(Ages[i]>0)
			{
					
				Ages[i]-=Random(1, 3);
				if(Ages[i]<0){Ages[i]=0;Continue;}
				if(!(Owner is 'PlayerPawn') && MRGPartsDraw()){
					For(int j=0;j<2;j++)Owner.A_SpawnParticle(Color(int(int(Col.R*1.5)*Min(1, Ages[i]/(35*6))),int(int(Col.G*1.5)*Min(1, Ages[i]/(35*6))),int(int(Col.B*1.5)*Min(1, Ages[i]/(35*6)))), SPF_RELPOS, 1, Ages[i]/(35*15)*2, Angle, Locs[i].X, Locs[i].Y, Min(Z, Locs[i].Z),
						Owner.Vel.X, Owner.Vel.Y, Owner.Vel.Z);
				}
				
				if(35*Random(3, 40)<Ages[i])
				{
					
					if(MRGPartsDraw())For(float j=0;j<Random(1, 5);j++)Owner.A_SpawnParticle(Col, SPF_RELPOS, 30, Ages[i]/(35*15)*2, Angle, Locs[i].X, Locs[i].Y, Min(Z, Locs[i].Z-j*.5*(Ages[i]/(35*15))),
						Owner.Vel.X, Owner.Vel.Y, Owner.Vel.Z, 0,0,-.3);
					if(CVar.GetCVar("MRGoreParts_FloorSpots", Players[ConsolePlayer]).GetInt()>0 && MRGPartsDraw())
					{
						Vector2 Pos = Owner.Pos.XY;
						if(Owner.Health>0||MRGoreParts_Voxel)
						{
							Pos += Actor.AngleToVector(Owner.Angle, Locs[i].X);
							Pos += Actor.AngleToVector(Owner.Angle-90, Locs[i].Y);
						}
						else
						{
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera), 1);
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera)-90, Locs[i].Y);
						}
						Float FloorZ = LevelLocals.PointInSector(Pos).FloorPlane.ZatPoint(Pos);

						if(35*15-Ages[i]>(Locs[i].Z-FloorZ)/4)
							Owner.A_SpawnParticle(Col, SPF_RELPOS, CVar.GetCVar("MRGoreParts_SpotsTime", Players[ConsolePlayer]).GetInt()*35, Ages[i]/(35*15)*2, Angle, Locs[i].X+FRandom(-1, 1), Locs[i].Y+FRandom(-1, 1), 1-(Owner.Pos.Z-FloorZ));
					}
					if(Ages[i]>35*3)//Random(0, 10)>7 && Ages[i]>35*3)
					{
						Double Angl = VectorAngle(Locs[i].X, Locs[i].Y);
						Vector2 Pos = (0,0);
						if(Owner.Health>0||MRGoreParts_Voxel)
						{
							Pos += Actor.AngleToVector(Owner.Angle, Locs[i].X);
							Pos += Actor.AngleToVector(Owner.Angle-90, Locs[i].Y);
						}
						else
						{
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera), 1);
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera)-90, Locs[i].Y);
						}
						
						MR_GoreParticlesHandler.MRParticleBloodSplash(Owner, Angl, Owner.Health>0?0:-90, Random(2, 9), Col, 0, .5, (Pos.X, Pos.Y, Min(Z, Locs[i].Z)-5));
					}
				}
				
				Ages[i]++;
			}
		}
	}
}

Class MR_GoreParticlesDeathHandler: Thinker
{
	Color Bld;
	Bool Sos, Artery;
	Float Mid;
	Actor Owner;
	int Age;
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Mid = Owner.Height*.5;
	}

	Override Void Tick()
	{
		if(Age>60||!Owner){Destroy();Return;}
		Age++;
		Super.Tick();
		
		TextureID Sprt = Owner.CurState.GetSpriteTexture(0);
		
		if(Sprt.IsValid())
		{
			
			Float y = Texman.CheckRealHeight(Sprt)*.9;
			y *= Owner.Scale.Y;
			
			Float Posy = Y;
			Double Pitch = -90;
			if(Mid<Y)
			{
				Pitch = -(Mid/y)*90;
				//Mid = Pitch;
			}
			
			Double Angle = Owner.Angle;
			if(!MRGoreParts_Voxel)Angle = Owner.AngleTo(Players[ConsolePlayer].Camera);
			
			if(Random(-200+Artery*160, 70)>Age)
			{
				if(MRGoreParts_Multiplayer)
				{
					MR_GoreParticlesFlyingBloodMultiplayer a = MR_GoreParticlesFlyingBloodMultiplayer(Owner.Spawn("MR_GoreParticlesFlyingBloodMultiplayer", Owner.pos + (0,0,Posy)));
					a.Col = Bld;
					a.Vel3DFromAngle(Random(3, 5), Angle+Random(-50, 50), -Pitch);
				}
				else
				{
					MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(Owner.Spawn("MR_GoreParticlesFlyingBlood", Owner.pos + (0,0,y)));
					a.Col = Bld;
					a.Vel3DFromAngle(Random(3, 5), Angle+Random(-50, 50), -Pitch);
				}
			}
			if(Age<60)
			{
				MR_GoreParticlesHandler.MRParticleBloodSplash(Owner, Angle, Pitch, Random(-25+Artery*17, 1)*Random(3, 14), Bld, 0, 1, (0,0,Posy));
			}
		}
	}
}

Class MR_GoreParticlesFlyingBlood: Actor
{
	Default{
		-Solid
		+ThruActors
		+Missile
		-SKYEXPLODE
		Gravity .3;
		Scale 3;
		Radius 3;
		Height 3;
	}
	
	Color Col;
	//Float Brightnes;
	
	Bool MRGPartsDraw()
	{
		if(!Players[ConsolePlayer].Camera)Return false;
		Return CVar.GetCVar("MRGoreParts_Draw", Players[ConsolePlayer]).GetBool() && CVar.GetCVar("MRGoreParts_FlyingBood", Players[ConsolePlayer]).GetBool();
	}
	
	//Override Void PostBeginPlay(){Super.PostBeginPlay();Brightnes = 1.5;}
	
	States
	{
		Spawn:
			TNT1 A 1{
				if(MRGPartsDraw())
				{
					Float Brightnes = FRandom(.5, 2);
					
					Color CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
					
					A_SpawnParticle(CurCol, 0, 1, Scale.X, 0, 0,0,0, Vel.X, Vel.Y, Vel.Z);
					
					Float InterBright = Brightnes;
					Vector3 Dif = LevelLocals.Vec3Diff(Pos, Prev);
					For(int i=0;i<Dif.Length();i++)
					{
						Float Step = i;
						Step /= Dif.Length();
						//if(i%2==0)
						Brightnes = FRandom(.5, 2);
						CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
						
						Float Rand = FRandom(-Scale.X*.25, Scale.X*.25);
						
						A_SpawnParticle(CurCol, 0, 25, Scale.X*.9, 0, Dif.X*Step+Vel.X*.5+Rand,Dif.Y*Step+Vel.Y*.5+Rand,Dif.Z*Step+Vel.Z*.5+Rand, 0,0,0, 0,0,-Gravity*.5, 1, -1, -Scale.X*.9*.05);
						//else A_SpawnParticle(Col, 0, 1, Scale.X, 0, Dif.X*Step,Dif.Y*Step,Dif.Z*Step, Vel.X, Vel.Y, Vel.Z);
					}
				}
			}
			Wait;
		
		Death:
			TNT1 A 0{
			if(!CVar.GetCVar("MRGoreParts_FloorSpots", Players[ConsolePlayer]).GetInt()<2)Return;
			if(Pos.Z>FloorZ+1 && Pos.Z+Height<CeilingZ)//Hit wall
			{
				FLineTraceData data;
				LineTrace(Angle, Radius*3, 0, TRF_THRUACTORS, 0, -Radius, 0, data);
				if(data.HitLine!=Null)
				{
					Float DeltaX = data.HitLine.V2.p.X - data.HitLine.V1.p.X;
					Float DeltaY = data.HitLine.V2.p.Y - data.HitLine.V1.p.Y;
					
					Angle = atan2(DeltaY, DeltaX) + 90;
					SetOrigin(data.HitLocation, false);
				}
				else {Destroy();Return;}
				if(MRGPartsDraw() && CVar.GetCVar("MRGoreParts_FloorSpots", Players[ConsolePlayer]).GetInt()>1)For(int i=0;i<9;i+=Random(1, 2))
				{
					Float Size = FRandom(.8, 2);
					A_SpawnParticle(Col, SPF_RELATIVE, CVar.GetCVar("MRGoreParts_SpotsTime", Players[ConsolePlayer]).GetInt()*35, Size, 0, -1, Random(-7, 7), Random(-6, 6),
						VelX:0, 0, 0, 0, 0, -FRandom(.00002, .00004));
				}
			}
			else
			{
				if(Pos.Z+Height>=CeilingZ)//Hit ceiling
				{
					Destroy();
				}
				else//Hit floor
				{
					For(int i=Random(0, 5);i<11;i++)
					{
						Float Size = FRandom(.8, 2);
						
						Vector2 Posy = Pos.XY;
						Vector2 Par = (Random(-5, 5), Random(-5, 5));
						Posy += Par;
						
						Float Floory = LevelLocals.PointInSector(Posy).FloorPlane.ZatPoint(Posy);
						
						
						if(MRGPartsDraw())A_SpawnParticle(Col, 0, 800, Size, 0, Par.X, Par.Y, 1-(Pos.Z-Floory),
							VelX:0,0,0, 0,0,0, 1, 1./800.);
					}
					Destroy();
				}
			}
		}
		Stop;
	}
}

Class MR_GoreParticlesFlyingBloodMultiplayer: Actor
{
	Default{
		-Solid
		+ThruActors
		+Missile
		-SKYEXPLODE
		+NOINTERACTION
		Gravity 1;
		Scale 3;
		Radius 3;
		Height 3;
		}
	
	Color Col;
	Float Brightnes;
	
	Bool MRGPartsDraw()
	{
		if(!Players[ConsolePlayer].Camera)Return false;
		Return CVar.GetCVar("MRGoreParts_Draw", Players[ConsolePlayer]).GetBool() && CVar.GetCVar("MRGoreParts_FlyingBood", Players[ConsolePlayer]).GetBool();
	}
	
	States
	{
		Spawn:
			TNT1 A 1{
				Vel.Z -= Gravity*.5;
				if(MRGPartsDraw()){
					Brightnes += Vel.Z*.1;
					Color CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
					
					A_SpawnParticle(CurCol, 0, 1, Scale.X, 0, 0,0,0, Vel.X, Vel.Y, Vel.Z);
					A_SpawnParticle(CurCol, 0, 25, Scale.X*.9, 0, 0,0,0, 0,0,0, 0,0,-Gravity*.5, 1, -1, -Scale.X*.9*.05);}
				}
			Wait;
	}
}