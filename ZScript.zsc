Version "4.10"//Getting rid of translationdId errors

Const MRGP_MaxWounds = 15;//Max wounds per entity
Const MRGP_DistanceMult = 2.;//Effects scaling by distance
//Const MRGP_MinBright = .5;
//Const MRGP_MaxBright = 1.5;
Const MRGP_GibbingTime = 60.;

enum MRGPartsSpawnFlags{
	MRSPF_SMOKE = 1,
}

Struct MRGParts
{
	Static Double Diff(Double a, Double b)
	{
		if(a>b)Return a-b;
		Return b-a;
	}
	
	Static Vector2 Vec2Mult(Vector2 Vec1, Vector2 Vec2)
	{
		Return (Vec1.X*Vec2.Y, Vec1.Y*Vec2.Y);
	}
	Static Vector2 Vec2Div(Vector2 Vec1, Vector2 Vec2)
	{
		Return (Vec1.X/Vec2.Y, Vec1.Y/Vec2.Y);
	}
	
	Static Vector3 Vec3Mult(Vector3 Vec1, Vector3 Vec2)
	{
		Return (Vec1.X*Vec2.Y, Vec1.Y*Vec2.Y, Vec1.Z*Vec2.Z);
	}
	Static Vector3 Vec3Div(Vector3 Vec1, Vector3 Vec2)
	{
		Return (Vec1.X/Vec2.Y, Vec1.Y/Vec2.Y, Vec1.Z/Vec2.Z);
	}
	
	Static Double VectorPitch(Vector3 Vec)
	{
		Return -atan2(Vec.Z, Vec.XY.Length());
	}
	
	Static Double AngleToVector2(Vector2 Pos, Vector2 Dir)
	{
		Vector2 Dif = Levellocals.Vec2Diff(Pos, Dir);
		
		Return VectorAngle(Dif.X, Dif.Y);
	}
	
	Static Double PitchToVector3(Vector3 Pos, Vector3 Dir)
	{
		Vector3 Dif = Levellocals.Vec3Diff(Pos, Dir);
		
		Return -atan2(Dif.Z, Dif.XY.Length());
	}
	
	Static Double MRDistance2D(Actor mo, Actor mo1)
	{
		if(!MRGoreParts_LiteDistance)Return mo.Distance2D(mo1);
		
		Vector2 Vec1, Vec2;
		
		Vec1 = mo.Pos.XY;
		Vec2 = mo1.Pos.XY;
		
		Vector2 Dif = Levellocals.Vec2Diff(Vec1, Vec2);
		
		Return Dif.Length();
	}
	Static Double MRDistance2DV(Vector2 Vec1, Vector2 Vec2)
	{
		Vector2 Dif = Levellocals.Vec2Diff(Vec1, Vec2);
		
		Return Dif.Length();
	}
	
	Static Double MRDistance3D(Actor mo, Actor mo1)
	{
		if(!MRGoreParts_LiteDistance)Return mo.Distance3D(mo1);
		
		Vector3 Vec1, Vec2;
		
		Vec1 = mo.Pos;
		Vec2 = mo1.Pos;
		
		Vector3 Dif = Levellocals.Vec3Diff(Vec1, Vec2);
		
		Return Dif.Length();
	}
	Static Double MRDistance3DV(Vector3 Vec1, Vector3 Vec2)
	{
		Vector3 Dif = Levellocals.Vec3Diff(Vec1, Vec2);
		
		Return Dif.Length();
	}
	
	Static Void MRSpawnParticle(Color Col=Color(0,0,0), int Flags=0, int Style=STYLE_None, int Life=1, double Size=1, double Angle=0, Vector3 Pos=(0,0,0), Vector3 Vel=(0,0,0), Vector3 Accel=(0,0,0), Double Alpha=1, Double Fade=0, Double SizeStep=0)
	{
		FSpawnParticleParams p;
		p.Accel = Accel;
		p.Vel = Vel;
		
		p.Pos = Pos;
		
		p.Color1 = Col;
		p.LifeTime = Life;
		p.size = Size;
		p.sizeStep = SizeStep;
		p.startalpha = Alpha;
		p.fadestep = Fade;
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		p.Flags = Glow|Flags;
		p.Style = Style;
		
		if(Flags&MRSPF_SMOKE){
			Switch(MRGoreParts_MistTexture)
			{
				Case 0:p.Texture = Texman.CheckForTexture("GParMst");Break;
				Default: p.Texture = Texman.CheckForTexture("GParMst"..MRGoreParts_MistTexture);Break;
				Case 3:p.Texture = Texman.CheckForTexture("glpart");Break;
			}
		}
		Level.SpawnParticle(p);
	}
}

//#include "MRGoreParts-code/HandlerFuncs.zsc"
#include "MRGoreParts-code/Handler.zsc"
#include "MRGoreParts-code/Thinkers.zsc"
#include "MRGoreParts-code/Effects.zsc"
#include "MRGoreParts-code/Wounds.zsc"
#include "MRGoreParts-code/Menu.zsc"