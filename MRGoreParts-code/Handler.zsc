/*
	Main frame
	Blood, gibs, death effects spawning
*/

Class MR_GoreParticlesStaticHandler: StaticEventHandler
{
	Ui Bool RecsShown;
	Array<MR_GoreParticlesEffect> Effects;
	
	Override Void OnRegister()
	{
		Effects.Clear();
		
		For(int i=0;i<AllClasses.Size();i++)
		{
			if(AllClasses[i] is 'MR_GoreParticlesEffect')
			{
				if(AllClasses[i].IsAbstract())Continue;
				else
				{
					MR_GoreParticlesEffect Clas = MR_GoreParticlesEffect(New(AllClasses[i].GetClassName()));
					Effects.Push(Clas);
				}
			}
		}
	}
}

Class MR_GoreParticlesHandler: EventHandler
{
	Double Dif(Double a, Double b)
	{
		if(a>b)Return a-b;
		
		Return b-a;
	}
	
	Array<MR_GoreParticlesEffect> Effects, AlwaysEffects;
	Array<MR_GoreParticlesDeathHandler> Dyings;
	Array<int> GibsTime;
	
	Array<String> RemoveBloods, RemoveBloodTypes;
	String RemoveBloodBase;
	
	String EffectsList, AlwaysEffectsList,
		HitSound, SpraySound, DripSound, GibSound;
	
	Void UpdateEffects()
	{
		MR_GoreParticlesStaticHandler Handler = MR_GoreParticlesStaticHandler(StaticEventHandler.Find("MR_GoreParticlesStaticHandler"));
		
		Effects.Clear();
		EffectsList = CVar.FindCVar("MRGoreParts_EffectsList").GetString();
		
		String TempStr = EffectsList;
		
		While(TempStr.IndexOf("  ")>-1)
		{
			TempStr.Replace("  ", " ");
		}
		
		While(TempStr.Length()>0)
		{
			String Num;
			if(TempStr.IndexOf(" ")>-1){Num = TempStr.Left(TempStr.IndexOf(" "));TempStr = TempStr.Mid(TempStr.IndexOf(" ")+1);}
			else {Num = TempStr;TempStr = "";}
			
			if(Num.ToInt()>=0 && Num.ToInt()<Handler.Effects.Size())Effects.Push(Handler.Effects[Num.ToInt()]);
		}
		
		AlwaysEffects.Clear();
		AlwaysEffectsList = CVar.FindCVar("MRGoreParts_AlwaysEffectsList").GetString();
		TempStr = AlwaysEffectsList;
		
		While(TempStr.IndexOf("  ")>-1)
		{
			TempStr.Replace("  ", " ");
		}
		
		While(TempStr.Length()>0)
		{
			String Num;
			if(TempStr.IndexOf(" ")>-1){Num = TempStr.Left(TempStr.IndexOf(" "));TempStr = TempStr.Mid(TempStr.IndexOf(" ")+1);}
			else {Num = TempStr;TempStr = "";}
			
			if(Num.ToInt()>=0 && Num.ToInt()<Handler.Effects.Size())AlwaysEffects.Push(Handler.Effects[Num.ToInt()]);
		}
		/*if(MRGoreParts_Debug){
			Console.printf("\c-All Effects:");
			For(int i=0;i<Handler.Effects.Size();i++)Console.printf("\cg"..i.." "..Handler.Effects[i].GetName());
			Console.Printf("\c-==============");
			
			Console.printf("\c-Effects:");
			For(int i=0;i<Effects.Size();i++)Console.Printf("\cd"..i.." "..Effects[i].GetName());
			Console.Printf("\c-==============");
			
			Console.printf("\c-Always Effects:");
			For(int i=0;i<AlwaysEffects.Size();i++)Console.Printf("\cv"..i.." "..AlwaysEffects[i].GetName());
			Console.Printf("\c-==============");
		}*/
	}
	
	Array<Actor> Wounded;
	Array<MR_GoreParticlesWound> Wounds;
	
	Array<Class <Actor> > BlackList;

	
	Array<String> Monsters;
	Color Colors[50];
	
	/*
		MRPRTCOL (MickRomash's gore PaRTiCle COLours) lump stores information
		about blood colours for specific monster classes
		
		Syntax:
		MonsterClassName (R G B)
		
		example:
		HellKnight (10 80 10)
		Cacodemon (30 30 120)
	*/
	
	Override Void OnRegister()
	{
		int LumpNum = 0;
		While(LumpNum>-1)
		{
			int TempLump = Wads.FindLump("MRPRTCOL", LumpNum+1);
			if(TempLump==-1)Break;
			else LumpNum = TempLump;
		}
		
		String Lump = Wads.ReadLump(LumpNum);
		Lump.Replace("\n", "");
		While(Lump.IndexOf("(")>-1)
		{
			String Monster = Lump.Left(Lump.IndexOf(" "));
			if((Class<Actor>)(Monster))Monsters.Push(Monster);

			String Cols = Lump.Mid(Lump.IndexOf("("), Lump.IndexOf(")")).." ";
			int Vals[3];
			
			For(int i=0;i<3;i++)
			{
				String Temp = Cols.Left(Cols.IndexOf(" "));
				Vals[i] = Temp.ToInt();
				Cols = Cols.Mid(Cols.IndexOf(" ")+1);
			}
			
			if((Class<Actor>)(Monster))Colors[Monsters.Size()-1] = Color(Vals[0], Vals[1], Vals[2]);
			
			Lump = Lump.Mid(Lump.IndexOf(")")+2);
		}
		if(MRGoreParts_Debug){
			Console.Printf("\cdBlood color override:");
			For(int i=0;i<Monsters.Size();i++)Console.Printf(Monsters[i].." "..Colors[i]);
		}
		
		
		String BList = MRGoreParts_BlackList;
		BList.Replace(" ", "");
		While(BList.Length()>2)
		{
			String Monst;
			if(BList.IndexOf(",")>-1)
			{
				Monst = BList.Left(BList.IndexOf(","));
				BList = BList.Mid(BList.IndexOf(",")+1);
			}
			else 
			{
				Monst = BList;
				Blist = "";
			}
			
			
			Class<Actor> MonstCls = Monst;
			if(MonstCls)BlackList.Push(MonstCls);
		}
		
		if(MRGoreParts_Debug){
			Console.Printf("\cdBlacklist:");
			For(int i=0;i<BlackList.Size();i++)Console.Printf("\cg"..BlackList[i].GetClassName());
			Console.Printf("\cd===================");
		}
		
		SetUpSounds();
		SetUpBloodRemove();
		if(MRGoreParts_Debug){
			Console.Printf("\n\cgBase Blood: "..RemoveBloodBase);
			Console.Printf("\cgBlood Types:");
			For(int i=0;i<RemoveBloodTypes.Size();i++)Console.Printf(i.." "..RemoveBloodTypes[i]);
			Console.Printf("\cgBloods:");
			For(int i=0;i<RemoveBloods.Size();i++)Console.Printf(i.." "..RemoveBloods[i]);
			Console.Printf("-----------");
		}
		
		UpdateEffects();
	}
	
	Void SetUpSounds()
	{
		HitSound = "MRGP/Splash";
		DripSound = "MRGP/Drip";
		GibSound = "MRGP/XDeath";
		SpraySound = "MRGP/Spray";
		
		String Mod;
		
		Mod = 'MRGP_SoundAddon';
		if((Class<Object>)(Mod))Return;
		
		Mod = 'NashGoreActor';//Nashgore next
		if((Class<Actor>)(Mod))
		{
			HitSound = "nashgore/bloodsplash";
			DripSound = "nashgore/gibsmall";
			SpraySound = "nashgore/gibbounce";
			GibSound = "nashgore/xdeath";
			Return;
		}
		
		Mod = 'UG_GibBase';//Universal gibs
		if((class<Actor>)(Mod))
		{
			GibSound = SpraySound = "UGSound/Default";
			Return;
		}
		
		Mod = 'Bolognese_Blood';
		if((class<Actor>)(Mod))
		{
			DripSound = "blooddrop2";
			HitSound = "misc/xdeath2";
			GibSound = "SLOP";
			Return;
		}
		
		Mod = 'Droplets';
		if((Class<Actor>)(Mod))
		{
			HitSound = "blood/hit";
			DripSound = "blood/drip";
			Return;
		}
		
		Mod = 'BrutalHereticImp';//Ketchup V5
		if((Class<Actor>)(Mod))
		{
			DripSound = "blooddrop2";
			HitSound = "misc/xdeath2";
			GibSound = "misc/xdeath4";
			Return;
		}
		
		Mod = 'Doomer';//Brutal Dewm
		if((Class<Actor>)(Mod))
		{
			DripSound = "blooddrop2";
			HitSound = "misc/xdeath2";
			GibSound = "misc/xdeath4";
			Return;
		}
		
		Mod = 'PileOfGibs';//Splatter gore
		if((Class<Actor>)(Mod))
		{
			SpraySound = "Gore/Squish";
			GibSound = "Gore/GIBSPLAT";
			Return;
		}
	}
	
	Void SetUpBloodRemove()
	{
		RemoveBloods.Clear();
		RemoveBloodTypes.Clear();
		
		For(int i=0;i<AllActorClasses.Size();i++)
		{
			String Blud = GetDefaultByType(AllActorClasses[i]).BloodType;
			if(Blud!="Blood" && RemoveBloodTypes.Find(Blud)==RemoveBloodTypes.Size())RemoveBloodTypes.Push(Blud);
			
			Blud = GetDefaultByType(AllActorClasses[i]).BloodType2;
			if(Blud!="BloodSplatter" && RemoveBloodTypes.Find(Blud)==RemoveBloodTypes.Size())RemoveBloodTypes.Push(Blud);
			
			Blud = GetDefaultByType(AllActorClasses[i]).BloodType3;
			if(Blud!="AxeBlood" && RemoveBloodTypes.Find(Blud)==RemoveBloodTypes.Size())RemoveBloodTypes.Push(Blud);
		}
		
		String Mod;
		
		Mod = 'NashGoreActor';//Nashgore next
		if((Class<Actor>)(Mod))
		{
			Return;
		}
		
		Mod = 'UG_GibBase';//Universal gibs
		if((class<Actor>)(Mod))
		{
			RemoveBloodBase = 'UG_GibImpactBlood';
			Return;
		}
		
		Mod = 'Bolognese_Blood';
		if((class<Actor>)(Mod))
		{
			RemoveBloodBase = 'BD_FlyingBlood';
			RemoveBloods.Push('SuperGore');
			RemoveBloods.Push('BD_FlyingBloodTrail');
			Return;
		}
		
		Mod = 'Droplets';
		if((Class<Actor>)(Mod))
		{
			RemoveBloodBase = 'BloodHitPuff';
			Return;
		}
		
		Mod = 'BrutalHereticImp';//Ketchup V5
		if((Class<Actor>)(Mod))
		{
			RemoveBloodBase = 'Brutal_Blood';
			RemoveBloods.Push('TinyBlood');
			RemoveBloods.Push('BloodHit');
			RemoveBloods.Push('Brutal_FlyingBlood');
			RemoveBloods.Push('Brutal_FlyingBloodFake');
			Return;
		}
		
		Mod = 'HDOperator';//Hideous destructor
		if((Class<Actor>)(Mod))
		{
			RemoveBloodBase = 'BloodSplatSilent';
			RemoveBloods.Push('HDBloodTrailFloor');
			Return;
		}
		
		Mod = 'Doomer';//Brutal Dewm
		if((Class<Actor>)(Mod))
		{
			Return;
		}
		
		/*Mod = 'PileOfGibs';//Splatter gore
		if((Class<Actor>)(Mod))
		{
			Return;
		}*/
	}
	
	Float ViewBob;
		
	Override Void WorldTick()
	{
		For(int i=0;i<GibsTime.Size();i++)
		{
			GibsTime[i]++;
			if(GibsTime[i]>MRGP_GibbingTime){GibsTime.Delete(i);i--;}
		}
				
		if(!CVar_CheckLimit)Return;
		Let Plr = Players[ConsolePlayer].Camera;
		
		Vector3 Pos = (0,0, Plr.Player.ViewZ-Plr.Pos.Z);
		Pos.XY += Actor.AngleToVector(Plr.Angle+90, -CVar_CheckLimitOffset + 1*Abs(Sin(Plr.Pitch)));
		
		Float NewBob = Plr.Player.ViewZ - Plr.Pos.Z - Plr.Player.ViewHeight;
		Float Bob;
		Bob = Actor.DeltaAngle(ViewBob, NewBob);
		
		Pos += (Actor.AngleToVector(Plr.Angle, 4)*Cos(Abs(Plr.Pitch)),Abs(Cos(Plr.Pitch))*2.3 -Sin(Plr.Pitch)*4);
		Pos.XY += Actor.AngleToVector(Plr.Angle, 3.4)*Sin(Plr.Pitch);
		
		
		if(GameTic%4==0)
			Plr.A_SpawnParticle(Color(0,150,0), SPF_FULLBRIGHT, 1, .5, 0, Pos.X,Pos.Y,Pos.Z-Bob -Plr.Vel.Z*1.3,
				Plr.Vel.X,Plr.Vel.Y,Bob +Plr.Vel.Z*1.3, FadeStepf:0);
			
		ViewBob = NewBob;
	}
	
	Bool MRGPartsCheckDraw(Actor mo = Null)
	{
		Let Plr = Players[ConsolePlayer];
		if(!Plr.Camera)Return false;
		if(!CVar_Draw)Return false;
		
		if(!mo)Return true;
		
		
		Return mo.CheckSight(Plr.Camera) && abs(Actor.DeltaAngle(Plr.Camera.Angle, Plr.Camera.AngleTo(mo)))<120;
	}
	
	Void SpawnNoBlood(Actor mo, Actor inflictor, Double Angle)
	{
		if(CVar_NoBloodMist)
		{
			//MR_GoreParticlesEffect_Mist a = New('MR_GoreParticlesEffect_Mist');
			
			Actor Who = mo;
			Double ZOfst = mo.Height*.5;
			if(Inflictor&&Inflictor.Distance2D(mo)<mo.Radius*1.5){Who = Inflictor; Angle = Who.AngleTo(mo)+180; ZOfst = 0;}
			
			Float Bright = CFRandom(.7, 1.4);
			
			Color Col = CVar_NoBloodMistColor;

			Col = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			MR_GoreParticlesEffect.SpawnEffect('MR_GoreParticlesEffect_Mist', Who, 0, Angle, Who.Pos.Z/(mo.Pos.Z+mo.Height*.5)*90, Col, Offset:(0,0,ZOfst));
		}
	}
		
	////
	//// EVENTS
	////
	
	Override Void WorldThingDamaged(WorldEvent e)
	{
		if(e.Thing.bIsMonster||e.Thing is 'PlayerPawn'||e.Thing.bCorpse)
		{
			if((e.Thing.bNoBlood && !MRGoreParts_NoBloodMonsters) && (BlackList.Find(e.Thing.GetClass())==BlackList.Size()||!MRGoreParts_BlacklistOn))
			{
				SpawnNoBlood(e.Thing, e.Inflictor, e.DamageAngle);
				Return;
			}
			
			if(MRGoreParts_BlacklistOn)
				For(int i=0;i<BlackList.Size();i++){
					if(e.Thing is BlackList[i]){SpawnNoBlood(e.Thing, e.Inflictor, e.DamageAngle);Return;}
				}
			
			String HDest = 'HDOperator';
			if((Class<Actor>)(HDest) && e.DamageType != 'piercing' && e.DamageType != 'bleedout')Return;
			
			String Damage = "";
			if(e.DamageFlags&DMG_EXPLOSION)Damage = Damage.."Explosion|";
			if(e.DamageFlags&DMG_USEANGLE)Damage = Damage.."Use_Angle|";
			if(e.DamageFlags&DMG_INFLICTOR_IS_PUFF)Damage = Damage.."IsPuff|";
			if(MRGoreParts_Debug)Console.Printf("Damage: "..e.DamageType.." Flags: "..Damage);
			if(MRGoreParts_Debug && e.DamageSource)Console.Printf("Source: "..e.DamageSource.GetClassName().." "..e.DamageSource.Pos);
			if(MRGoreParts_Debug && e.Inflictor && e.Inflictor!=e.DamageSource)Console.Printf("Inflictor: "..e.Inflictor.GetClassName().." "..e.Inflictor.Pos);
			
			Float Amount = CVar_Amount;
				
			Color Col = e.Thing.BloodColor;
			if(CVar_UseCustomColor)
			{
				Col = CVar_Color;
			}
			else
			{
				if(e.Thing.BloodColor==0 && e.Thing.BloodTranslation==0)Col = GameInfo.defaultbloodcolor;
				For(int i=0;i<Monsters.Size();i++)
				{
					if(Monsters[i]==e.Thing.GetClassName())
					{
						Col = Colors[i];
						Break;
					}
				}
			}
			
			if(e.DamageType == 'bleedout')
			{
				Vector3 Pos = (Actor.AngleToVector(e.Thing.Angle + FRandom(-90, 90), e.Thing.Radius*.7), Random(e.Thing.Height*.25, e.Thing.Height*.7));
				
				For(int i=0;i<Random(2, 4);i++)
				e.Thing.A_SpawnParticle(Col, 0, 20, FRandom(2, 3), 0, Pos.X,Pos.Y,Pos.Z+.1*i,
					0,0,0, 0,0,-.3);
				MR_GoreParticlesEffect.SpawnEffect('MR_GoreParticlesEffect_SimpleSplash', e.Thing, 0, e.DamageAngle, 0, Col, 1, .6, 1, Pos);
			}
			
			if(e.Inflictor)
			{
				//Console.Printf("\cdHealth: \c-"..e.Thing.Health.." \cgDamage: \c-"..e.Damage);
				//Console.Printf("Damage: "..e.DamageType.." Flags: "..Damage);
				
				if(Random(0, 10)>4 && MRGoreParts_Wounds && !PlayerPawn(e.Thing) && Wounds.Size()<MRGP_MaxWOundsGlobal && e.DamageType != 'bleedout')
				{
					MR_GoreParticlesWound Token;
					if(Wounded.Find(e.Thing)==Wounded.Size())
					{
						Wounded.Push(e.Thing);
						MR_GoreParticlesWound a = New('MR_GoreParticlesWound');
						a.Owner = e.Thing;
						Wounds.Push(a);
						Token = a;
					}
					else
					{
						For(int i=0;i<Wounds.Size();i++)
						{
							//if(!Wounds[i]||Wounds[i].bDestroyed)Continue;
							if(Wounds[i].Owner==e.Thing){Token = Wounds[i];Break;}
						}
					}
					
					Token.Col = Col;
					
					if(e.Inflictor != e.Thing && e.Inflictor != e.DamageSource)
					{
						Bool Replace = true;
						For(int i=0;i<Token.Ages.Size();i++)
						{
							if(Token.Ages[i]<1)
							{
								if(MRGoreParts_Debug)Console.Printf("\cdTarget pos:\cc "..e.Thing.Pos.XY.."\cg inflict pos:\cc "..e.Inflictor.Pos.XY);
								Vector3 Dif = LevelLocals.Vec3Diff(e.Inflictor.Pos, e.Thing.Pos);
				
								Vector3 Home = (0, 0, 0);
								
								Home.Y -= Dif.X*Cos(e.Thing.Angle-90) + Dif.Y*Sin(e.Thing.Angle-90);
								Home.X -= Dif.X*Cos(e.Thing.Angle) + Dif.Y*Sin(e.Thing.Angle);
								
								Home.XY *= .75;
								
								Home.X *= abs(Cos(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));
								Home.Y *= abs(Sin(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));

								Home.Z = -Dif.Z+5;
								
								if(Home.X>0)Home.X = Min(Home.X, e.Thing.Radius);
								else Home.X = Max(Home.X, -e.Thing.Radius);
								
								if(Home.Y>0)Home.Y = Min(Home.Y, e.Thing.Radius);
								else Home.Y = Max(Home.Y, -e.Thing.Radius);
								
								Token.Locs[i]=Home;
								Token.Angles[i]=e.Thing.AngleTo(e.Inflictor);
								Token.Ages[i]=35*15;
								Replace = false;
								Break;
							}
						}
						if(Replace)
						{
							if(MRGoreParts_Debug)Console.Printf("Targ "..e.Thing.Pos.XY.." inf "..e.Inflictor.Pos.XY);
							Vector3 Dif = LevelLocals.Vec3Diff(e.Inflictor.Pos, e.Thing.Pos);
			
							Vector3 Home = (0, 0, 0);
							
							Home.Y -= Dif.X*Cos(e.Thing.Angle-90) + Dif.Y*Sin(e.Thing.Angle-90);
							Home.X -= Dif.X*Cos(e.Thing.Angle) + Dif.Y*Sin(e.Thing.Angle);
							
							Home.XY *= .75;
							
							Home.X *= abs(Cos(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));
							Home.Y *= abs(Sin(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));

							Home.Z = -Dif.Z+5;
							
							if(Home.X>0)Home.X = Min(Home.X, e.Thing.Radius);
							else Home.X = Max(Home.X, -e.Thing.Radius);
							
							if(Home.Y>0)Home.Y = Min(Home.Y, e.Thing.Radius);
							else Home.Y = Max(Home.Y, -e.Thing.Radius);
							
							Token.Locs[0]=Home;
							Token.Angles[0]=e.Thing.AngleTo(e.Inflictor);
							Token.Ages[0]=35*15;
						}
					}
					else
					{
						Array<int> Ages;
						For(int i=0;i<Token.Ages.Size();i++)
						{
							if(Token.Ages[i]>0)
							{
								Ages.Push(i);
							}
						}
						
						if(Ages.Size()>0)Token.Ages[Ages[Random(0, Ages.Size()-1)]]=1;
						
						else
						{
							Token.Ages[0]=35*15;
							Token.Locs[0]=(Actor.AngleToVector(Random(0, 360), e.Thing.Radius*.3), Random(5, e.Thing.Height));
						}
					}
				}
				
				if(e.Inflictor != e.Thing)
				{
					int SplashType = Random(1, 8);
					if(!e.DamageSource)Return;
					Double Pitch = 0;
					if(e.DamageSource && e.DamageSource.Player)Pitch = e.Inflictor.PitchTo(e.DamageSource, 5, e.DamageSource.Player.ViewZ-e.DamageSource.Pos.Z);
					else if(e.DamageSource)Pitch = e.Inflictor.PitchTo(e.DamageSource, 0, e.DamageSource.Height*.9);
					
					Let Spot = e.Inflictor;
					Double VOfst = 0;
					Double DifZ = Dif(Spot.Pos.Z, e.Thing.pos.Z+e.Thing.Height*.5);

					if(e.Inflictor.Distance2D(e.Thing)>e.Thing.Radius*1.5||DifZ>e.Thing.Height*.5){Spot = e.Thing;VOfst = e.Thing.Height*.5;}

					if(Effects.Size()>0)
						Effects[CRandom(0, Effects.Size()-1)].DoParticleEffect(Spot, 0, Spot.AngleTo(e.DamageSource), Pitch, Col, offset:(0,0,VOfst));
					For(int i=0;i<AlwaysEffects.Size();i++)
					{
						AlwaysEffects[i].DoParticleEffect(Spot, 0, Spot.AngleTo(e.DamageSource), Pitch, Col, Offset:(0,0,VOfst));
					}
					
					if(Random(0, 50)>40)e.Inflictor.A_StartSound(DripSound, CHAN_AUTO);
					e.Inflictor.A_StartSound(HitSound, CHAN_AUTO);


					if(Random(0, 100)>95 && MRGoreParts_FlyingBlood)
					{
						MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(e.Inflictor.Spawn("MR_GoreParticlesFlyingBlood", e.Inflictor.Pos));
						a.Col = Col;
						a.Vel3DFromAngle(Random(4, 6), e.Inflictor.AngleTo(e.DamageSource)+Random(-50, 50), -Random(0, 60));
						a.Scale *= FRandom(1, 2);
						a.A_StartSound(SpraySound, CHAN_AUTO, Volume: CFRandom(.2, .3), Pitch: CFrandom(1.1, 1.2));
					}
					
					For(int i=CRandom(0, 10)*Amount;i<20*Amount;i++)
					{
						Float Dist = 1;
						if(e.DamageSource)Dist *= 1+(e.Inflictor.Distance3D(e.DamageSource)-80)*.0025;
						Float Size = CFRandom(.8, 1.6)*Dist;
						Float Pitch = e.Inflictor.Pos.Z/e.Thing.Height+CRandom(10, 20);
						if(e.Inflictor is 'BulletPuff' && e.DamageSource)Pitch = e.DamageSource.Pitch+CRandom(10, 20);
						Float Ang = CRandom(175, 185);
						Float Angle = e.Inflictor.AngleTo(e.Thing)+Ang;
						if(e.Inflictor is 'BulletPuff' && e.DamageSource)Angle = e.Inflictor.AngleTo(e.DamageSource)+180+Ang;
						Vector3 Ofst = (Actor.AngleToVector(Angle, 1)*abs(Cos(Pitch)), Sin(Pitch))*Dist;
								
						if(i%2==0 && MRGPartsCheckDraw(e.Inflictor) && CVar_DripOnImpact)
						{
							Ang = CRandom(140, 220)*Dist;
							Angle = e.Inflictor.AngleTo(e.Thing)+Ang;
							if(e.Inflictor is 'BulletPuff' && e.DamageSource)Angle = e.Inflictor.AngleTo(e.DamageSource)+180+Ang;
							Float Bright = CFRandom(1, 2);
							Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
							e.Inflictor.A_SpawnParticle(ColTmp, 0, CRandom(29, 40), Size*1.3, 0, Ofst.X*2,Ofst.Y*2,5,
									0,0,CFRandom(0, 1), 0,0,-.2, 1, 0, -Size/40);
						}
					}
				}
			}
		}
	}
	
	Override Void WorldThingDied(WorldEvent e)
	{
		if(!e.Thing||!(e.Thing.bIsMonster || e.Thing is 'PlayerPawn')||(e.Thing.bNoBlood && !MRGoreParts_NoBloodMonsters)||
			(BlackList.Find(e.Thing.GetClass())!=BlackList.Size()&&MRGoreParts_BlacklistOn) )Return;
		
		if(MRGoreParts_BlacklistOn)For(int i=0;i<BlackList.Size();i++){if(e.Thing is BlackList[i])Return;}
		
		Color Col = e.Thing.BloodColor;
		if(CVar_UseCustomColor)
		{
			Col = CVar_Color;
		}
		else
		{
			if(e.Thing.BloodColor==0 && e.Thing.BloodTranslation==0)Col = GameInfo.defaultbloodcolor;
			For(int i=0;i<Monsters.Size();i++)
			{
				if(Monsters[i]==e.Thing.GetClassName())
				{
					Col = Colors[i];
					Break;
				}
			}
		}
		
		Float Amount = CVar_Amount;

		if(e.Thing.FindState("XDeath") && e.Thing.Health<-GetDefaultByType(e.Thing.GetClass()).Health)
		{
			SpawnXDeath(e.Thing, e.Inflictor);
		}
		else if(MRGoreParts_MaxDying>0)
		{
			MR_GoreParticlesDeathHandler a = New('MR_GoreParticlesDeathHandler');
			a.Owner = e.Thing;
			a.Bld = Col;
			a.Artery = Max(0, Random(-5, 2));
			
			if(Dyings.Size()>=MRGoreParts_MaxDying)
			{
				Dyings[0].Destroy();
			}
			Dyings.Push(a);
		}
	}
	
	Override Void WorldThingSpawned(WorldEvent e)
	{
		if(!MRGoreParts_OnlyModsBlood)Return;
		if(!e.Thing)Return;
		
		if(e.Thing is 'Blood'||e.Thing is 'BloodSplatter'||e.Thing is 'AxeBlood'||Actor.GetReplacement("Blood")==e.Thing.GetClass()
			||e.Thing is RemoveBloodBase)
		{
			DoOtherBlood(e.Thing);
			Return;
		}
		
		if(MRGoreParts_BloodTypes)For(int i=0;i<RemoveBloodTypes.Size();i++)
		{
			if(e.Thing is RemoveBloodTypes[i]){DoOtherBlood(e.Thing);Return;}
		}
		
		For(int i=0;i<RemoveBloods.Size();i++)
		{
			if(e.Thing is RemoveBloods[i]){DoOtherBlood(e.Thing);Return;}
		}
		
		//Console.Printf(e.Thing.GetClassName());
	}
	
	Void SpawnBloodDrop(Actor mo, Color Col)
	{
		Bool Draw = CVar_Draw;
		
		Float TempGrav = -.3;
		
		if(Draw)For(int i=0;i<CRandom(2, 5);i++)
			mo.A_SpawnParticle(Col, 0, 20, CFRandom(3, 4), 0, CFRandom(-.5,.5),CFRandom(-.5,.5),.1*i, mo.Vel.X,mo.Vel.Y,0, 0,0,TempGrav);
		
		MR_GoreParticlesDelayedSpawner a = 
			MR_GoreParticlesDelayedSpawner(mo.Spawn("MR_GoreParticlesDelayedSpawner", (mo.pos.x+frandom(-1, 1), mo.pos.y+frandom(-1, 1), mo.floorz)));
		
		int Delay = 1;
		For(float i=mo.Pos.Z;i>mo.floorZ;i-=TempGrav)
		{
			TempGrav += abs(-.3);
			Delay++;
		}
		
		Double Alph = FRandom(.8, .9);
		a.Col = Col;
		a.Size = FRandom(2, 4);
		a.Delay = Delay;
		a.Life = 150;
		a.Fade = Alph/100;
		a.Alpha = Alph;
		a.Ofst = (0,0,1);
		
		mo.A_StartSound(DripSound, CHAN_AUTO, attenuation: ATTN_STATIC);
	}
	
	Void SpawnXDeath(Actor mo, Actor inflictor = Null)
	{
		mo.A_StartSound(GibSound, CHAN_AUTO);
		
		if(GibsTime.Size()>=MRGoreParts_MaxGibing)Return;
		
		Color Col = mo.BloodColor;
		if(CVar_UseCustomColor)
		{
			Col = CVar_Color;
		}
		else
		{
			if(mo.BloodColor==0 && mo.BloodTranslation==0)Col = GameInfo.defaultbloodcolor;
			For(int i=0;i<Monsters.Size();i++)
			{
				if(Monsters[i]==mo.GetClassName())
				{
					Col = Colors[i];
					Break;
				}
			}
		}
		
		Let Plr = Players[ConsolePlayer].Camera;
		Bool Draw = abs(Actor.deltaangle(Plr.AngleTo(mo), Plr.Angle))<CVar.GetCVAr("FOV", Plr.Player).GetFloat();
		
		Float Amount = CVar_Amount;
		
		GibsTime.Push(0);
		
		Float Angle = Random(0, 360);
		
		if(Inflictor)Angle = mo.AngleTo(Inflictor)+Random(-60, 60);
		
		if(Draw){
			Double Size = mo.Height;
			if(mo.Height<mo.Radius)Size = mo.Radius;
			MR_GoreParticlesEffect.SpawnEffect('MR_GoreParticlesEffect_Mist', mo, SGPF_NoDist|SGPF_FixAmount|SGPF_NoVel, Angle+CRandom(-120, 120), 0, Col, 1, Size, 2, (0,0,mo.Height*.5), 2, 1/(mo.Mass*.1));
		}
		
		if(Draw)For(int i=0;i<Amount*CRandom(8, 12);i++)
		{
			if(Effects.Size()>0)
				Effects[CRandom(0, Effects.Size()-1)].DoParticleEffect(mo, 0, Angle+CRandom(-120, 120), CRandom(-20, 0)*4, Col, 1.1, 4, 1,
					(CRandom(-mo.Radius, mo.Radius)*.5,CRandom(-mo.Radius, mo.Radius)*.5,CRandom(10, mo.Height*.5)), 4, 1/(mo.Mass*.1));
		}
				
		int SAmount;
		if(MRGoreParts_FlyingBlood)For(int i=0;i<Random(9, 12);i++)
		{
			MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(mo.Spawn("MR_GoreParticlesFlyingBlood", mo.Pos));
			a.Col = Col;
			a.Vel3DFromAngle(Random(5, 7), Angle+Random(-120, 120), -Random(40, 90));
			a.Scale *= FRandom(1, 2);
			if(SAmount>5*Amount)a.Scale = (0,0);
			else mo.A_StartSound(SpraySound, CHAN_AUTO, Volume: CFRandom(.1, .3), Pitch: CFrandom(1.1, 1.2));
			SAmount++;
		}
					
		if(MRGPartsCheckDraw(mo))For(int i=0;i<mo.Height*2*Amount;i++)
		{
			Float Bright = CFRandom(1, 2);
			mo.A_SpawnParticle(Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright)), SPF_RELATIVE, 40, CRandom(2, 5), CRandom(0, 360), CFRandom(0, mo.Radius), 0, CRandom(5, mo.Height),
				CRandom(-1, 1),0,CFRandom(0, 2), 0,0,-CFRandom(.3, .4), 1, 0, -CFRandom(.006, .01));
		}
	}
	
	Void DoOtherBlood(Actor mo)
	{
		Color Col = Gameinfo.DefaultBloodColor;
		if(CVar_UseCustomColor)
		{
			Col = CVar_Color;
		}
		
		String HDBld = 'HDBloodTrailFloor';
		if(mo is HDBld)
		{
			Double Alph = CFRandom(.8, 1);
			mo.A_SpawnParticle(Col, 0, 100, CRandom(2, 3), 0, 0,0,1,
				0,0,0, 0,0,0, Alph, Alph/100.);
			if(MRGoreParts_OnlyModsBlood)mo.Destroy();
			Return;
		}
		
		HDBld = 'BloodSplat';
		String HDBld2 = 'HDMasterBlood';
		if(mo is HDBld2||mo is HDBld)
		{
			String Sheild = 'HDMagicShield';
			if(mo is HDBld2 && mo.Target && mo.Target.CountInv(Sheild)>0 && !mo.bnobouncesound)Return;
			
			if(mo.Target && (mo.Target.BloodTranslation!=0||mo.Target.BloodColor!=0))Col = mo.Target.BloodColor;
			SpawnBloodDrop(mo, Col);
			if(MRGoreParts_OnlyModsBlood)mo.Destroy();
			Return;
		}
		
		if(CVar_Quake2)
			For(Int i=0;i<CRandom(6, 9)*CVar_Amount;i++)
			{
				Float Bright = CFRandom(.6, 2);
				mo.A_SpawnParticle(Color(int(col.r*Bright), int(col.g*Bright), int(col.b*Bright)), SPF_RelVel, 25, CFRandom(1.5, 2.5), mo.AngleTo(Players[ConsolePlayer].Camera),
					Xoff:CFRandom(-1.5, 1.5), CFRandom(-1.5, 1.5), CFRandom(4, 7), .1,0,.5, 0,0,-.05);
			}
		
		if(MRGoreParts_OnlyModsBlood){mo.Destroy();Return;}
		
		mo.A_SetRenderStyle(0, STYLE_NONE);
	}
	

	
	Override Void NetworkProcess(ConsoleEvent e)
	{
		if(e.name ~== "MRGP_UpdateEffects")
		{
			UpdateEffects();
		}
		if(e.name ~== "MRGP_UpdateCVars")
		{
			CacheUserCVars();
		}
	}
	
	Override Void WorldLoaded(WorldEvent e)
	{
		CacheUserCVars();
	}
		
	//Stored user CVars
	Transient Bool CVar_Draw, CVar_Quake2, CVar_DripOnImpact,
		CVar_UseCustomColor, CVar_FullBright, CVar_NoBloodMist,
		CVar_FuzzyBlood, CVar_DrawFlyingBood, CVar_CheckLimit,
		CVar_LowAlpha, CVar_DrawWounds;
		
	Transient Int CVar_CorpseWounds, CVar_FloorSpots, CVar_SpotsTime,
		CVar_MistTexture;
	
	Transient Float CVar_Amount, CVar_Distance, CVar_CheckLimitOffset,
		CVar_Speed;
	
	Transient Color CVar_Color, CVar_NoBloodMistColor;
	
	Void CacheUserCVars()
	{
		Let Plr = Players[ConsolePlayer];
		CVar_Draw = CVar.FindCVar("MRGoreParts_Draw").GetBool();
		CVar_Quake2 = CVar.FindCVar("MRGoreParts_Quake2").GetBool();
		CVar_DripOnImpact = CVar.FindCVar("MRGoreParts_DripOnImpact").GetBool();
		CVar_UseCustomColor = CVar.FindCVar("MRGoreParts_UseCustomColor").GetBool();
		CVar_FullBright = CVar.FindCVar("MRGoreParts_FullBright").GetBool();
		CVar_NoBloodMist = CVar.FindCVar("MRGoreParts_NoBloodMist").GetBool();
		CVar_FuzzyBlood = CVar.FindCVar("MRGoreParts_FuzzyBlood").GetBool();
		CVar_DrawFlyingBood = CVar.FindCVar("MRGoreParts_DrawFlyingBood").GetBool();
		CVar_CheckLimit = CVar.FindCVar("MRGoreParts_CheckLimit").GetBool();
		CVar_LowAlpha = CVar.FindCVar("MRGoreParts_LowAlpha").GetBool();
		CVar_DrawWounds = CVar.FindCVar("MRGoreParts_DrawWounds").GetBool();
		
		CVar_CorpseWounds = CVar.FindCVar("MRGoreParts_CorpseWounds").GetInt();
		CVar_FloorSpots = CVar.FindCVar("MRGoreParts_FloorSpots").GetInt();
		CVar_SpotsTime = CVar.FindCVar("MRGoreParts_SpotsTime").GetInt();
		CVar_MistTexture = CVar.FindCVar("MRGoreParts_MistTexture").GetInt();
		
		CVar_Amount = CVar.FindCVar("MRGoreParts_Amount").GetFloat();
		CVar_Distance = CVar.FindCVar("MRGoreParts_Distance").GetFloat();
		CVar_CheckLimitOffset = CVar.FindCVar("MRGoreParts_CheckLimitOffset").GetFloat();
		CVar_Speed = CVar.FindCVar("MRGoreParts_Speed").GetFloat();
		
		CVar_Color = CVar.FindCVar("MRGoreParts_Color").GetInt();
		CVar_NoBloodMistColor = CVar.FindCVar("MRGoreParts_NoBloodMistColor").GetInt();
	}
	
	Override Void PlayerEntered(PlayerEvent e)
	{
		SendInterfaceEvent(ConsolePlayer, "MRGP_OpenRecs", 5, 1);
		if(e.PlayerNumber == ConsolePlayer)CacheUserCVars();
	}
	
	////////////////////////////////////////////////////////////////////////////
	
	Override Void InterfaceProcess(ConsoleEvent e)
	{
		if(e.name ~== "MRGP_OpenRecs")
		{
			if(e.args[1])
			{
				MR_GoreParticlesStaticHandler Handler = MR_GoreParticlesStaticHandler(StaticEventHandler.Find("MR_GoreParticlesStaticHandler"));
				if(Handler.RecSShown)Return;
			}
			
			CheckRecS(e.args[1]);
			if(e.args[1] && Recs.Size()<1)Return;
			
			ShowRecs = !ShowRecs;
			if(RecsAnim<1)RecsAnim = 20;
			if(!ShowRecs)Return;
			if(e.args[0]>0)ShowingRecs = 35*e.args[0];
		}
		if(e.name ~== "MRGP_ListUserCVars")
		{
			Console.Printf("\cfCached user CVars:");
			
			Console.Printf("\cvBools:");
			Console.Printf("\cgCVar_Draw\c- "..CVar_Draw.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_Draw").GetBool());
			Console.Printf("\cgCVar_Quake2\c- "..CVar_Quake2.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_Quake2").GetBool());
			Console.Printf("\cgCVar_DripOnImpact\c- "..CVar_DripOnImpact.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_DripOnImpact").GetBool());
			Console.Printf("\cgCVar_UseCustomColor\c- "..CVar_UseCustomColor.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_UseCustomColor").GetBool());
			Console.Printf("\cgCVar_FullBright\c- "..CVar_FullBright.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_FullBright").GetBool());
			Console.Printf("\cgCVar_NoBloodMist\c- "..CVar_NoBloodMist.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_NoBloodMist").GetBool());
			Console.Printf("\cgCVar_FuzzyBlood\c- "..CVar_FuzzyBlood.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_FuzzyBlood").GetBool());
			Console.Printf("\cgCVar_FlyingBood\c- "..CVar_DrawFlyingBood.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_FlyingBood").GetBool());
			Console.Printf("\cgCVar_CheckLimit\c- "..CVar_CheckLimit.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_CheckLimit").GetBool());
			Console.Printf("\cgCVar_LowAlpha\c- "..CVar_LowAlpha.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_LowAlpha").GetBool());
			Console.Printf("\cgCVar_DrawWounds\c- "..CVar_DrawWounds.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_DrawWounds").GetBool());
			
			Console.Printf("\cvInts:");
			Console.Printf("\cgCVar_CorpseWounds\c- "..CVar_CorpseWounds.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_CorpseWounds").GetInt());
			Console.Printf("\cgCVar_FloorSpots\c- "..CVar_FloorSpots.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_FloorSpots").GetInt());
			Console.Printf("\cgCVar_SpotsTime\c- "..CVar_SpotsTime.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_SpotsTime").GetInt());
			Console.Printf("\cgCVar_MistTexture\c- "..CVar_MistTexture.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_MistTexture").GetInt());
			
			Console.Printf("\cvFloats:");
			Console.Printf("\cgCVar_Amount\c- "..CVar_Amount.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_Amount").GetFloat());
			Console.Printf("\cgCVar_Distance\c- "..CVar_Distance.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_Distance").GetFloat());
			Console.Printf("\cgCVar_CheckLimitOffset\c- "..CVar_CheckLimitOffset.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_CheckLimitOffset").GetFloat());
			Console.Printf("\cgCVar_Speed\c- "..CVar_Speed.." \cdCVar:\c- "..CVar.FindCVar("MRGoreParts_Speed").GetFloat());
			
			Console.printf("\cvColors:");
			Color Col = CVar.FindCVar("MRGoreParts_Color").GetInt();
			Console.Printf("\cgCVar_Color\c- "..CVar_Color.." \cdCVar:\c- "..Col);
			Col = CVar.FindCVar("MRGoreParts_NoBloodMistColor").GetInt();
			Console.Printf("\cgCVar_NoBloodMistColor\c- "..CVar_NoBloodMistColor.." \cdCVar:\c- "..Col);
		}
	}
	
	Ui Array<String> RecS;
	Ui Bool ShowRecs;
	Ui int RecsAnim, ShowingRecs;
	
	Ui Void CheckRecS(bool GameStart = false)
	{
		RecS.Clear();
		String Mod = 'HDOperator';
		if((class<actor>)(Mod))
		{
			if(CVar_Quake2)RecS.Push("\cc"..StringTable.Localize("$MRGoreParts_BloodSpawnMenu").."\cv/\cg"..StringTable.Localize("$MRGoreParts_Quake2").."\cc 0");
			if(MRGoreParts_OnlyModsBlood<2)RecS.Push("\cc"..StringTable.Localize("$MRGoreParts_BloodSpawnMenu").."\cv/\cg"..StringTable.Localize("$MRGoreParts_OnlyModsBlood")..
				"\cc "..StringTable.Localize("$MRGoreParts_OnlyModsBlood"..2));
			if(MRGoreParts_BloodTypes)RecS.Push("\cc"..StringTable.Localize("$MRGoreParts_BloodSpawnMenu").."\cv/\cg"..StringTable.Localize("$MRGoreParts_BloodTypes").."\cc 0");
			if(MRGoreParts_BlacklistOn)RecS.Push("\cc"..StringTable.Localize("$MRGoreParts_BloodSpawnMenu").."\cv/\cg"..StringTable.Localize("$MRGoreParts_BlacklistOn").."\cc 0");
			if(CVar_Distance>0)Recs.Push("\cc"..StringTable.Localize("$MRGoreParts_EffectsMenu").."\cv/\cg"..StringTable.Localize("$MRGoreParts_Distance").."\cc 0");
			if(!MRGoreParts_Wounds)RecS.Push("\cc"..StringTable.Localize("$MRGoreParts_WoundsMenu").."\cv/\cg"..StringTable.Localize("$MRGoreParts_Wounds").."\cc 1");
			if(CVar_CorpseWounds!=1)RecS.Push("\cc"..StringTable.Localize("$MRGoreParts_WoundsMenu").."\cv/\cg"..StringTable.Localize("$MRGoreParts_CorpseWounds")..
				"\cc "..StringTable.Localize("$MRGoreParts_CorpseWounds"..1));
		}
		
		if(GameStart)
		{
			MR_GoreParticlesStaticHandler Handler = MR_GoreParticlesStaticHandler(StaticEventHandler.Find("MR_GoreParticlesStaticHandler"));
			
			Handler.RecSShown = true;
			
			if(RecS.Size()<1)Return;
			Console.Printf(StringTable.Localize("$MR_GoreParticlesUi_RecS"));
			
			For(int i=0;i<Recs.Size();i++)
			{
				Console.Printf(Recs[i]);
			}
			
			Console.Printf(StringTable.Localize("============================"));
		}
	}
	
	Override Void UiTick()
	{
		if(ShowRecs)CheckRecS();
		if(menuactive!=menu.off||!ShowRecs)Return;
				
		if(ShowingRecs>1 && RecsAnim<1)ShowingRecs--;
		if(ShowingRecs==1){ShowingRecs = 0;RecsAnim = 20;ShowRecs = false;Return;}
	}
	
	Override Void RenderOverlay(RenderEvent e)
	{
		if(!ShowRecs && RecsAnim<0)Return;
		
		Let Sb = StatusBar;
		
		Vector2 HUDSca = Sb.GetHUDScale();
		Double HUDScale = ((4/HUDSca.X)/(4/Sb.defaultScale.X));
		
		bool OriginalOffsets = Sb.FullscreenOffsets;
		Sb.FullscreenOffsets = true;
		
		HUDFont MainFont = HUDFont.Create("NewSmallFont");
		
		Double Alph = RecsAnim;
		Alph /= 20;
		
		if(ShowRecS)Alph = 1.-Alph;
		
		int PosY = -NewSmallFont.GetHeight()*.5 * (Recs.Size()-1);
		Sb.DrawString(MainFont, StringTable.Localize("$MR_GoreParticlesUi_RecS"), (0, PosY)*HUDScale, Sb.DI_SCREEN_LEFT_CENTER, Alpha:Alph, Scale:(.5,.5)*HUDScale);
		
		if(RecS.Size()>0)For(int i=0;i<RecS.Size();i++)
		{
			Sb.DrawString(MainFont, RecS[i], (0, PosY+NewSmallFont.GetHeight()*.5*(i+1))*HUDScale, Sb.DI_SCREEN_LEFT_CENTER, Alpha:Alph, Scale:(.5,.5)*HUDScale);
		}
		else 
		{
			String DoneS = StringTable.Localize("$MR_GoreParticlesUi_RecSDone");
			String Sounds = 'MRGP_SoundAddon';
			if(!((class<object>)(Sounds)))DoneS = DoneS.."  "..StringTable.Localize("$MR_GoreParticlesUi_RecSSound");
			Sb.DrawString(MainFont, DoneS, (0, PosY+NewSmallFont.GetHeight()*.5)*HUDScale, Sb.DI_SCREEN_LEFT_CENTER, Font.CR_GREEN, Alph, Scale:(.5,.5)*HUDScale);
		}
		if(RecsAnim>0)RecsAnim--;
		
		Sb.FullscreenOffsets = OriginalOffsets;
	}
}

Class MR_GoreParticlesDelayedSpawner: Actor//You'll never guess what mod it originates from
{
	Color Col;
	Float Size, Fade, Resize;
	Vector3 Ofst, Vely, Accel;
	int Delay, Life;
	
	Static Bool MRGPartsCheckDraw(Actor mo = Null)
	{
		Let Plr = Players[ConsolePlayer];
		if(!Plr.Camera)Return false;
		MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		if(!Handler.CVar_Draw)Return false;
		
		if(!mo)Return true;
		
		
		Return mo.CheckSight(Plr.Camera) && abs(Actor.DeltaAngle(Plr.Camera.Angle, Plr.Camera.AngleTo(mo)))<120;
	}
		
	Override Void Tick()
	{
		Super.Tick();
		if(Delay<0){A_SpawnParticle(Col, 0, 1, Size, StartAlphaf:Alpha);Destroy();Return;}
				
		if((Delay>-1&&GetAge()>Delay)||(Delay<0&&Pos.Z==FloorZ))
		{
			A_SpawnParticle(Col, SPF_RELATIVE, Life, Size, 0, Ofst.X, Ofst.Y, Ofst.Z,
				Vely.X, Vely.Y, Vely.Z, Accel.X, AcceL.Y, Accel.Z, Alpha, Fade, Resize);
			Destroy();
		}
	}
}

Class MR_GoreParticlesDeathHandler: Thinker
{
	Color Bld;
	Bool Sos, Artery, Draw;
	Float Mid;
	Actor Owner;
	int Age;
	Double Fov;
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(!Owner)Return;
		Mid = Owner.Height*.5;
		MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		Owner.A_StartSound(Handler.SpraySound, CHAN_AUTO);
		Fov = CVar.FindCVar("FOV").GetFloat();
	}
	
	Override Void OnDestroy()
	{
		MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		Handler.Dyings.Delete(Handler.Dyings.Find(Self));
		Super.OnDestroy();
	}
	
	Bool MRGPartsCheckDraw()
	{
		Let Plr = Players[ConsolePlayer];
		if(!Plr.Camera)Return false;
		MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		if(!Handler.CVar_Draw)Return false;
		if(!Owner.CheckSight(Plr.Camera))Return false;
		
		Return abs(Actor.DeltaAngle(Plr.Camera.Angle, Plr.Camera.AngleTo(Owner)))<Fov;
	}

	Override Void Tick()
	{
		if(Age>60||!Owner){Destroy();Return;}
		Age++;
		Super.Tick();
		
		if(Owner.instatesequence(Owner.CurState, Owner.ResolveState("gib")))
		{
			MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
			Handler.SpawnXDeath(Owner);
			Destroy();
			Return;
		}
		
		if(Age%2==0)Draw = MRGPartsCheckDraw();
		
		TextureID Sprt = Owner.CurState.GetSpriteTexture(0);
		
		if(Sprt.IsValid())
		{
			
			Float y = Texman.CheckRealHeight(Sprt)*.9;
			y *= Owner.Scale.Y;
			
			Float Posy = Y;
			Double Pitch = -90;
			if(Mid<Y)
			{
				Pitch = -(Mid/y)*90;
				//Mid = Pitch;
			}
			
			Double Angle = Owner.Angle;
			if(!MRGoreParts_Voxel)Angle = Owner.AngleTo(Players[ConsolePlayer].Camera);
			
			if(Random(-500+Artery*200, 70)>Age && MRGoreParts_FlyingBlood)
			{
				MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(Owner.Spawn("MR_GoreParticlesFlyingBlood", Owner.pos + (0,0,y)));
				a.Col = Bld;
				a.Vel3DFromAngle(Random(3, 5), Angle+Random(-50, 50), Pitch);
				MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
				a.A_StartSound(Handler.SpraySound, CHAN_AUTO, Volume: CFRandom(.1, .2), Pitch: CFrandom(1.1, 1.2));
			}
			if(Age<Random(-40, 60) && Draw)
			{
				MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
				if(Handler.Effects.Size()>0)
					Handler.Effects[CRandom(0, Handler.Effects.Size()-1)].DoParticleEffect(Owner, 0, Angle, Pitch, Bld, 1, 1.5, 1, (0,0,Y*.9));
			}
		}
	}
}