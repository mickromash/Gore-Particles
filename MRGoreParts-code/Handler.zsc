/*
	Main frame
	Blood, gibs, death effects spawning
*/

Class MR_GoreParticlesStaticHandler: StaticEventHandler
{
	Array<MR_GoreParticlesEffect> Effects;
	
	Override Void OnRegister()
	{
		Effects.Clear();
		
		For(int i=0;i<AllClasses.Size();i++)
		{
			if(AllClasses[i] is 'MR_GoreParticlesEffect')
			{
				if(AllClasses[i].IsAbstract())Continue;
				else
				{
					MR_GoreParticlesEffect Clas = MR_GoreParticlesEffect(New(AllClasses[i].GetClassName()));
					Effects.Push(Clas);
				}
			}
		}
	}
}

Class MR_GoreParticlesHandler: EventHandler
{
	Double Dif(Double a, Double b)
	{
		if(a>b)Return a-b;
		
		Return b-a;
	}
	
	Array<MR_GoreParticlesEffect> Effects, AlwaysEffects;
	Array<MR_GoreParticlesDeathHandler> Dyings;
	Array<int> GibsTime;
	
	Array<String> RemoveBloods;
	String RemoveBloodBase;
	
	//Array< function<Clearscope Void(Actor, Double, Double, Color, double, Double, Vector3)> > Effects, AlwaysEffects;
	String EffectsList, AlwaysEffectsList,
		HitSound, SpraySound, DripSound, GibSound;
	
	Void UpdateEffects()
	{
		MR_GoreParticlesStaticHandler Handler = MR_GoreParticlesStaticHandler(StaticEventHandler.Find("MR_GoreParticlesStaticHandler"));
		
		Effects.Clear();
		EffectsList = CVar.GetCVar("MRGoreParts_EffectsList", Players[ConsolePlayer]).GetString();
		
		String TempStr = EffectsList;
		
		While(TempStr.IndexOf("  ")>-1)
		{
			TempStr.Replace("  ", " ");
		}
		
		While(TempStr.Length()>0)
		{
			String Num;
			if(TempStr.IndexOf(" ")>-1){Num = TempStr.Left(TempStr.IndexOf(" "));TempStr = TempStr.Mid(TempStr.IndexOf(" ")+1);}
			else {Num = TempStr;TempStr = "";}
			
			if(Num.ToInt()>=0 && Num.ToInt()<Handler.Effects.Size())Effects.Push(Handler.Effects[Num.ToInt()]);
		}
		
		AlwaysEffects.Clear();
		AlwaysEffectsList = CVar.GetCVar("MRGoreParts_AlwaysEffectsList", Players[ConsolePlayer]).GetString();
		TempStr = AlwaysEffectsList;
		
		While(TempStr.IndexOf("  ")>-1)
		{
			TempStr.Replace("  ", " ");
		}
		
		While(TempStr.Length()>0)
		{
			String Num;
			if(TempStr.IndexOf(" ")>-1){Num = TempStr.Left(TempStr.IndexOf(" "));TempStr = TempStr.Mid(TempStr.IndexOf(" ")+1);}
			else {Num = TempStr;TempStr = "";}
			
			if(Num.ToInt()>=0 && Num.ToInt()<Handler.Effects.Size())AlwaysEffects.Push(Handler.Effects[Num.ToInt()]);
		}
		if(MRGoreParts_Debug){
			Console.printf("\c-All Effects:");
			For(int i=0;i<Handler.Effects.Size();i++)Console.printf("\cg"..i.." "..Handler.Effects[i].GetName());
			Console.Printf("\c-==============");
			
			Console.printf("\c-Effects:");
			For(int i=0;i<Effects.Size();i++)Console.Printf("\cd"..i.." "..Effects[i].GetName());
			Console.Printf("\c-==============");
			
			Console.printf("\c-Always Effects:");
			For(int i=0;i<AlwaysEffects.Size();i++)Console.Printf("\cv"..i.." "..AlwaysEffects[i].GetName());
			Console.Printf("\c-==============");
		}
	}
	
	Array<Actor> Wounded;
	Array<MR_GoreParticlesWound> Wounds;
	
	Array<Class <Actor> > BlackList;

	
	Array<String> Monsters;
	Color Colors[40];
	
	/*
		MRPRTCOL (MickRomash's gore PaRTiCle COLours) lump stores information
		about blood colours for specific monster classes
		
		Syntax:
		MonsterClassName (R G B)
		
		example:
		HellKnight (0 90 0)
		Cacodemon (0 0 120)
	*/
	
	Override Void OnRegister()
	{
		int LumpNum = 0;
		While(LumpNum>-1)
		{
			int TempLump = Wads.FindLump("MRPRTCOL", LumpNum+1);
			if(TempLump==-1)Break;
			else LumpNum = TempLump;
		}
		
		String Lump = Wads.ReadLump(LumpNum);
		Lump.Replace("\n", "");
		While(Lump.IndexOf("(")>-1)
		{
			Monsters.Push(Lump.Left(Lump.IndexOf(" ")));

			String Cols = Lump.Mid(Lump.IndexOf("("), Lump.IndexOf(")")).." ";
			int Vals[3];
			
			For(int i=0;i<3;i++)
			{
				String Temp = Cols.Left(Cols.IndexOf(" "));
				Vals[i] = Temp.ToInt();
				Cols = Cols.Mid(Cols.IndexOf(" ")+1);
			}
			
			Colors[Monsters.Size()-1] = Color(Vals[0], Vals[1], Vals[2]);
			
			Lump = Lump.Mid(Lump.IndexOf(")")+2);
		}
		if(MRGoreParts_Debug){
			Console.Printf("\cdBlood color override:");
			For(int i=0;i<Monsters.Size();i++)Console.Printf(Monsters[i].." "..Colors[i]);
		}
		String BList = MRGoreParts_BlackList;
		BList.Replace(" ", "");
		While(BList.Length()>2)
		{
			String Monst;
			if(BList.IndexOf(",")>-1)
			{
				Monst = BList.Left(BList.IndexOf(","));
				BList = BList.Mid(BList.IndexOf(",")+1);
			}
			else 
			{
				Monst = BList;
				Blist = "";
			}
			
			
			Class<Actor> MonstCls = Monst;
			if(MonstCls)BlackList.Push(MonstCls);
		}
		
		if(MRGoreParts_Debug){
			Console.Printf("\cdBlacklist:");
			For(int i=0;i<BlackList.Size();i++)Console.Printf("\cg"..BlackList[i].GetClassName());
		}
		
		SetUpSounds();
		SetUpBloodRemove();
		
		UpdateEffects();
	}
	
	Void SetUpSounds()
	{
		HitSound = "MRGP/Splash";
		DripSound = "MRGP/Drip";
		GibSound = "MRGP/XDeath";
		SpraySound = "MRGP/Spray";
		
		String Mod;
		
		Mod = 'MRGP_SoundAddon';
		if((Class<Object>)(Mod))Return;
		
		Mod = 'NashGoreActor';//Nashgore next
		if((Class<Actor>)(Mod))
		{
			HitSound = "nashgore/bloodsplash";
			DripSound = "nashgore/gibsmall";
			SpraySound = "nashgore/gibbounce";
			GibSound = "nashgore/xdeath";
			Return;
		}
		
		Mod = 'UG_GibBase';//Universal gibs
		if((class<Actor>)(Mod))
		{
			GibSound = SpraySound = "UGSound/Default";
			Return;
		}
		
		Mod = 'Bolognese_Blood';
		if((class<Actor>)(Mod))
		{
			DripSound = "blooddrop2";
			HitSound = "misc/xdeath2";
			GibSound = "SLOP";
			Return;
		}
		
		Mod = 'Droplets';
		if((Class<Actor>)(Mod))
		{
			HitSound = "blood/hit";
			DripSound = "blood/drip";
			Return;
		}
		
		Mod = 'BrutalHereticImp';//Ketchup V5
		if((Class<Actor>)(Mod))
		{
			DripSound = "blooddrop2";
			HitSound = "misc/xdeath2";
			GibSound = "misc/xdeath4";
			Return;
		}
		
		Mod = 'Doomer';//Brutal Dewm
		if((Class<Actor>)(Mod))
		{
			DripSound = "blooddrop2";
			HitSound = "misc/xdeath2";
			GibSound = "misc/xdeath4";
			Return;
		}
		
		Mod = 'PileOfGibs';//Splatter gore
		if((Class<Actor>)(Mod))
		{
			SpraySound = "Gore/Squish";
			GibSound = "Gore/GIBSPLAT";
			Return;
		}
	}
	
	Void SetUpBloodRemove()
	{
		String Mod;
		
		RemoveBloods.Clear();
		
		Mod = 'NashGoreActor';//Nashgore next
		if((Class<Actor>)(Mod))
		{
			Return;
		}
		
		Mod = 'UG_GibBase';//Universal gibs
		if((class<Actor>)(Mod))
		{
			RemoveBloodBase = 'UG_GibImpactBlood';
			Return;
		}
		
		Mod = 'Bolognese_Blood';
		if((class<Actor>)(Mod))
		{
			RemoveBloodBase = 'BD_FlyingBlood';
			RemoveBloods.Push('SuperGore');
			RemoveBloods.Push('BD_FlyingBloodTrail');
			Return;
		}
		
		Mod = 'Droplets';
		if((Class<Actor>)(Mod))
		{
			RemoveBloodBase = 'BloodHitPuff';
			Return;
		}
		
		Mod = 'BrutalHereticImp';//Ketchup V5
		if((Class<Actor>)(Mod))
		{
			RemoveBloodBase = 'Brutal_Blood';
			RemoveBloods.Push('TinyBlood');
			RemoveBloods.Push('BloodHit');
			RemoveBloods.Push('Brutal_FlyingBlood');
			RemoveBloods.Push('Brutal_FlyingBloodFake');
			Return;
		}
		
		Mod = 'Doomer';//Brutal Dewm
		if((Class<Actor>)(Mod))
		{
			Return;
		}
		
		/*Mod = 'PileOfGibs';//Splatter gore
		if((Class<Actor>)(Mod))
		{
			Return;
		}*/
	}
		
	Override Void RenderOverlay(RenderEvent e)
	{
		Return;
		Let Sb = StatusBar;
		
		Bool WhyOffsetS = Sb.FullscreenOffsets;
		Sb.FullscreenOffsets = true;
		
		HUDFont BigFnt = HUDFont.Create("BIGFONT");
		
		Sb.DrawString(BigFnt, "Wounds: "..Wounds.Size(), (0,3), Sb.DI_SCREEN_LEFT_TOP, Scale:(.75,.75));
		Sb.DrawString(BigFnt, "Wounded: "..Wounded.Size(), (0,13), Sb.DI_SCREEN_LEFT_TOP, Scale:(.75,.75));
		
		
		Sb.FullscreenOffsets = WhyOffsetS;
	}
	
	Float ViewBob;
	
	Override Void WorldTick()
	{
		For(int i=0;i<GibsTime.Size();i++)
		{
			GibsTime[i]++;
			if(GibsTime[i]>MRGP_GibbingTime){GibsTime.Delete(i);i--;}
		}
		
		if(!CVar.GetCVar("MRGoreParts_CheckLimit", Players[ConsolePlayer]).GetBool())Return;
		Let Plr = Players[ConsolePlayer].Camera;
		
		Vector3 Pos = (0,0, Plr.Player.ViewZ-Plr.Pos.Z);
		Pos.XY += Actor.AngleToVector(Plr.Angle+90, 5 + 1*Abs(Sin(Plr.Pitch)));
		
		Float NewBob = Plr.Player.ViewZ - Plr.Pos.Z - Plr.Player.ViewHeight;
		Float Bob;
		Bob = Actor.DeltaAngle(ViewBob, NewBob);
		
		Pos += (Actor.AngleToVector(Plr.Angle, 4)*Cos(Abs(Plr.Pitch)),Abs(Cos(Plr.Pitch))*2.3 -Sin(Plr.Pitch)*4);
		Pos.XY += Actor.AngleToVector(Plr.Angle, 3.4)*Sin(Plr.Pitch);
		
		
		Plr.A_SpawnParticle(Color(0,255,0), SPF_FULLBRIGHT|SPF_NOTIMEFREEZE, 1, .5, 0, Pos.X,Pos.Y,Pos.Z-Bob -Plr.Vel.Z*1.3,
			Plr.Vel.X,Plr.Vel.Y,Bob +Plr.Vel.Z*1.3, FadeStepf:0);
			
		ViewBob = NewBob;
	}
	
	
	Static Bool MRGPartsCheckDraw(Actor mo = Null)
	{
		Let Plr = Players[ConsolePlayer];
		if(!Plr.Camera)Return false;
		if(!CVar.GetCVar("MRGoreParts_Draw", Plr).GetBool())Return false;
		
		if(!mo)Return CVar.GetCVar("MRGoreParts_Draw", Plr).GetBool();
		
		
		Return mo.CheckSight(Plr.Camera) && abs(Actor.DeltaAngle(Plr.Camera.Angle, Plr.Camera.AngleTo(mo)))<120;
	}
		
	////
	//// EVENTS
	////
	
	Override Void WorldThingDamaged(WorldEvent e)
	{
		if((e.Thing.bIsMonster||e.Thing Is 'PlayerPawn'||e.Thing.bCorpse) && !(e.Thing.bNoBlood && MRGoreParts_NoBloodMonsters) && (BlackList.Find(e.Thing.GetClass())==BlackList.Size()||!MRGoreParts_BlacklistOn))
		{
			if(MRGoreParts_BlacklistOn)For(int i=0;i<BlackList.Size();i++){if(e.Thing is BlackList[i])Return;}
			String Damage = "";
			if(e.DamageFlags&DMG_EXPLOSION)Damage = Damage.."Explosion|";
			if(e.DamageFlags&DMG_USEANGLE)Damage = Damage.."Use_Angle|";
			if(e.DamageFlags&DMG_INFLICTOR_IS_PUFF)Damage = Damage.."IsPuff|";
			if(MRGoreParts_Debug)Console.Printf("Damage: "..e.DamageType.." Flags: "..Damage);
			if(MRGoreParts_Debug && e.DamageSource)Console.Printf("Source: "..e.DamageSource.GetClassName().." "..e.DamageSource.Pos);
			if(MRGoreParts_Debug && e.Inflictor && e.Inflictor!=e.DamageSource)Console.Printf("Inflictor: "..e.Inflictor.GetClassName().." "..e.Inflictor.Pos);
			
			if(e.Inflictor)
			{
				//Console.Printf("\cdHealth: \c-"..e.Thing.Health.." \cgDamage: \c-"..e.Damage);
				//Console.Printf("Damage: "..e.DamageType.." Flags: "..Damage);
				Float Amount = CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
				
				Color Col = e.Thing.BloodColor;
				if(CVar.GetCVar("MRGoreParts_UseCustomColor", Players[ConsolePlayer]).GetBool())
				{
					Col = CVar.GetCVar("MRGoreParts_Color", Players[ConsolePlayer]).GetInt();
				}
				else
				{
					if(e.Thing.BloodColor==0 && e.Thing.BloodTranslation==0)Col = GameInfo.defaultbloodcolor;
					For(int i=0;i<Monsters.Size();i++)
					{
						if(Monsters[i]==e.Thing.GetClassName())
						{
							Col = Colors[i];
							Break;
						}
					}
				}
				
				if(Random(0, 10)>4 && MRGoreParts_Wounds && !PlayerPawn(e.Thing) && Wounds.Size()<MRGP_MaxWOundsGlobal)
				{
					MR_GoreParticlesWound Token;
					if(Wounded.Find(e.Thing)==Wounded.Size())
					{
						Wounded.Push(e.Thing);
						MR_GoreParticlesWound a = New('MR_GoreParticlesWound');
						a.Owner = e.Thing;
						Wounds.Push(a);
						Token = a;
					}
					else
					{
						For(int i=0;i<Wounds.Size();i++)
						{
							//if(!Wounds[i]||Wounds[i].bDestroyed)Continue;
							if(Wounds[i].Owner==e.Thing){Token = Wounds[i];Break;}
						}
					}
					
					Token.Col = Col;
					
					if(e.Inflictor != e.Thing && e.Inflictor != e.DamageSource)
					{
						Bool Replace = true;
						For(int i=0;i<Token.Ages.Size();i++)
						{
							if(Token.Ages[i]<1)
							{
								if(MRGoreParts_Debug)Console.Printf("\cdTarget pos:\cc "..e.Thing.Pos.XY.."\cg inflict pos:\cc "..e.Inflictor.Pos.XY);
								Vector3 Dif = LevelLocals.Vec3Diff(e.Inflictor.Pos, e.Thing.Pos);
				
								Vector3 Home = (0, 0, 0);
								
								Home.Y -= Dif.X*Cos(e.Thing.Angle-90) + Dif.Y*Sin(e.Thing.Angle-90);
								Home.X -= Dif.X*Cos(e.Thing.Angle) + Dif.Y*Sin(e.Thing.Angle);
								
								Home.XY *= .75;
								
								Home.X *= abs(Cos(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));
								Home.Y *= abs(Sin(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));

								Home.Z = -Dif.Z+5;
								
								Token.Locs[i]=Home;
								Token.Angles[i]=e.Thing.AngleTo(e.Inflictor);
								Token.Ages[i]=35*15;
								Replace = false;
								Break;
							}
						}
						if(Replace)
						{
							if(MRGoreParts_Debug)Console.Printf("Targ "..e.Thing.Pos.XY.." inf "..e.Inflictor.Pos.XY);
							Vector3 Dif = LevelLocals.Vec3Diff(e.Inflictor.Pos, e.Thing.Pos);
			
							Vector3 Home = (0, 0, 0);
							
							Home.Y -= Dif.X*Cos(e.Thing.Angle-90) + Dif.Y*Sin(e.Thing.Angle-90);
							Home.X -= Dif.X*Cos(e.Thing.Angle) + Dif.Y*Sin(e.Thing.Angle);
							
							Home.XY *= .75;
							
							Home.X *= abs(Cos(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));
							Home.Y *= abs(Sin(Actor.DeltaAngle(e.Thing.Angle, e.Thing.AngleTo(e.Inflictor))));

							Home.Z = -Dif.Z+5;
							
							Token.Locs[0]=Home;
							Token.Angles[0]=e.Thing.AngleTo(e.Inflictor);
							Token.Ages[0]=35*15;
						}
					}
					else
					{
						Array<int> Ages;
						For(int i=0;i<Token.Ages.Size();i++)
						{
							if(Token.Ages[i]>0)
							{
								Ages.Push(i);
							}
						}
						
						if(Ages.Size()>0)Token.Ages[Ages[Random(0, Ages.Size()-1)]]=1;
						
						else
						{
							Token.Ages[0]=35*15;
							Token.Locs[0]=(Actor.AngleToVector(Random(0, 360), e.Thing.Radius*.3), Random(5, e.Thing.Height));
						}
					}
				}
				
				if(e.Inflictor != e.Thing)
				{
					int SplashType = Random(1, 8);
					if(!e.DamageSource)Return;
					Double Pitch = 0;
					if(e.DamageSource && e.DamageSource.Player)Pitch = e.Inflictor.PitchTo(e.DamageSource, 5, e.DamageSource.Player.ViewZ-e.DamageSource.Pos.Z);
					else if(e.DamageSource)Pitch = e.Inflictor.PitchTo(e.DamageSource, 0, e.DamageSource.Height*.9);
					
					if(Effects.Size()>0)
						Effects[Random(0, Effects.Size()-1)].SpawnEffect(e.Inflictor, 0, e.Inflictor.AngleTo(e.DamageSource), Pitch, Col);
					For(int i=0;i<AlwaysEffects.Size();i++)
					{
						AlwaysEffects[i].SpawnEffect(e.Inflictor, 0, e.Inflictor.AngleTo(e.DamageSource), Pitch, Col);
					}
					
					if(Random(0, 50)>40)e.Inflictor.A_StartSound(DripSound, CHAN_AUTO);
					e.Inflictor.A_StartSound(HitSound, CHAN_AUTO);


					if(Random(0, 100)>95)
					{
						/*if(MRGoreParts_Multiplayer)
						{
							MR_GoreParticlesFlyingBloodMultiplayer a = MR_GoreParticlesFlyingBloodMultiplayer(e.Inflictor.Spawn("MR_GoreParticlesFlyingBloodMultiplayer", e.Inflictor.Pos));
							a.Col = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
							a.Vel3DFromAngle(Random(3, 5), e.Inflictor.Angle+Random(-50, 50), -Random(60, 90));
						}
						else
						{*/
						MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(e.Inflictor.Spawn("MR_GoreParticlesFlyingBlood", e.Inflictor.Pos));
						a.Col = Col;
						a.Vel3DFromAngle(Random(4, 6), e.Inflictor.AngleTo(e.DamageSource)+Random(-50, 50), -Random(0, 60));
						a.Scale *= FRandom(1, 2);
						//}
					}
					
					For(int i=Random(0, 10)*Amount;i<20*Amount;i++)
					{
						Float Dist = 1;
						if(e.DamageSource)Dist *= 1+(e.Inflictor.Distance3D(e.DamageSource)-80)*.0025;
						Float Size = FRandom(.8, 1.6)*Dist;
						Float Pitch = e.Inflictor.Pos.Z/e.Thing.Height+Random(10, 20);
						if(e.Inflictor is 'BulletPuff' && e.DamageSource)Pitch = e.DamageSource.Pitch+Random(10, 20);
						Float Ang = Random(175, 185);
						Float Angle = e.Inflictor.AngleTo(e.Thing)+Ang;
						if(e.Inflictor is 'BulletPuff' && e.DamageSource)Angle = e.Inflictor.AngleTo(e.DamageSource)+180+Ang;
						Vector3 Ofst = (Actor.AngleToVector(Angle, 1)*abs(Cos(Pitch)), Sin(Pitch))*Dist;
								
						if(i%2==0 && MRGPartsCheckDraw(e.Inflictor) && CVar.GetCVar("MRGoreParts_DripOnImpact", Players[ConsolePlayer]).GetBool())
						{
							Ang = Random(140, 220)*Dist;
							Angle = e.Inflictor.AngleTo(e.Thing)+Ang;
							if(e.Inflictor is 'BulletPuff' && e.DamageSource)Angle = e.Inflictor.AngleTo(e.DamageSource)+180+Ang;
							Float Bright = FRandom(1, 2);
							Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
							e.Inflictor.A_SpawnParticle(ColTmp, 0, Random(29, 40), Size*1.3, 0, Ofst.X*2,Ofst.Y*2,5,
									0,0,FRandom(0, 1), 0,0,-.2, 1, 0, -Size/40);
						}
					}
				}
			}
		}
	}
	
	Override Void WorldThingDied(WorldEvent e)
	{
		if(!e.Thing||!(e.Thing.bIsMonster || e.Thing is 'PlayerPawn')||(e.Thing.bNoBlood && MRGoreParts_NoBloodMonsters)||
			(BlackList.Find(e.Thing.GetClass())!=BlackList.Size()&&MRGoreParts_BlacklistOn) )Return;
		
		if(MRGoreParts_BlacklistOn)For(int i=0;i<BlackList.Size();i++){if(e.Thing is BlackList[i])Return;}
		
		Color Col = e.Thing.BloodColor;
		if(CVar.GetCVar("MRGoreParts_UseCustomColor", Players[ConsolePlayer]).GetBool())
		{
			Col = CVar.GetCVar("MRGoreParts_Color", Players[ConsolePlayer]).GetInt();
		}
		else
		{
			if(e.Thing.BloodColor==0 && e.Thing.BloodTranslation==0)Col = GameInfo.defaultbloodcolor;
			For(int i=0;i<Monsters.Size();i++)
			{
				if(Monsters[i]==e.Thing.GetClassName())
				{
					Col = Colors[i];
					Break;
				}
			}
		}
		
		Float Amount = CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();

		if(e.Thing.FindState("XDeath") && e.Thing.Health<-GetDefaultByType(e.Thing.GetClass()).Health)
		{
			e.Thing.A_StartSound(GibSound, CHAN_AUTO);
			
			if(GibsTime.Size()>=MRGoreParts_MaxGibing)Return;
			
			GibsTime.Push(0);
			Vector2 Angle = (0, 360);
			
			if(e.Inflictor)Angle = (e.Thing.AngleTo(e.Inflictor)+40, e.Thing.AngleTo(e.Inflictor)+300);
			
			For(int i=0;i<Amount*Random(8, 12);i++)
			{
				if(MRGPartsCheckDraw(e.Thing) && Effects.Size()>0)
					Effects[Random(0, Effects.Size()-1)].SpawnEffect(e.Thing, 0, Angle.X+Random(-120, 120), Random(-20, 0)*4, Col, 1.5, 3,
						(Random(-e.Thing.Radius, e.Thing.Radius)*.5,Random(-e.Thing.Radius, e.Thing.Radius)*.5,Random(10, e.Thing.Height*.5)), 4, 1/e.Thing.Mass);
				For(int j=0;j<AlwaysEffects.Size();j++)
				{
					AlwaysEffects[j].SpawnEffect(e.Thing, SGPF_NODIST, Angle.X+Random(-120, 120), Random(-30, 0)*3, Col, 1, 7, (Random(-e.Thing.Radius, e.Thing.Radius)*.5,Random(-e.Thing.Radius, e.Thing.Radius)*.5,Random(10, e.Thing.Height)), 1.2, 1/e.Thing.Mass);
				}
				
				if(Random(0, 100)>30)
				{
					MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(e.Thing.Spawn("MR_GoreParticlesFlyingBlood", e.Thing.Pos));
					a.Col = Col;
					a.Vel3DFromAngle(Random(5, 7), Angle.X+Random(-120, 120), -Random(40, 90));
					a.Scale *= FRandom(1, 2);
				}
			}
			
			/*For(Float y=0;y<e.Thing.Height;y+=e.Thing.Height/(4*Amount))
			{
				if(MRGPartsCheckDraw(e.Thing))For(float i=Angle.X;i<Angle.Y;i+=Dif(Angle.X, Angle.Y)/(40*Amount))
				{
					Float Bright = FRandom(1, 2);
					Float Life = Random(60, 90);
					Float Vel = FRandom(1, 4);
					Float Size = Random(1, 6);
					e.Thing.A_SpawnParticle(Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright)), 0, Life, Size, 0, Cos(i)*2, Sin(i)*2, y+5,
						Vel*Cos(i), Vel*Sin(i), Random(1, 5), 0,0,-FRandom(.2, .4), FRandom(.8, 1.5), 0, Size/Life);
				}
			}*/
			
			if(MRGPartsCheckDraw(e.Thing))For(int i=0;i<e.Thing.Height*2*Amount;i++)
			{
				Float Bright = FRandom(1, 2);
				e.Thing.A_SpawnParticle(Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright)), SPF_RELATIVE, 40, Random(2, 5), Random(0, 360), FRandom(0, e.Thing.Radius), 0, Random(5, e.Thing.Height),
					Random(-1, 1),0,FRandom(0, 2), 0,0,-FRandom(.3, .4), 1, 0, -FRandom(.006, .01));
			}
			
			if(MRGPartsCheckDraw(e.Thing) && CVar.GetCVar("MRGoreParts_FloorSpots", Players[ConsolePlayer]).GetInt()>1)For(float i=Angle.X;i<Angle.Y;i+=Dif(Angle.X, Angle.Y)/100*Amount)
			{
				Float Bright = FRandom(1, 2);
				e.Thing.A_SpawnParticle(Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright)), SPF_RELPOS, CVar.GetCVar("MRGoreParts_SpotsTime", Players[ConsolePlayer]).GetInt()*35, Random(1, 3), i, Random(1, 60), 0, 1);
			}
		}
		else if(Random(0, 10)>2 && MRGoreParts_MaxDying>0)
		{
			MR_GoreParticlesDeathHandler a = New('MR_GoreParticlesDeathHandler');
			a.Owner = e.Thing;
			a.Bld = Col;
			if(Random(0, 10)==5)a.Artery = true;
			
			if(Dyings.Size()>=MRGoreParts_MaxDying)
			{
				Dyings[0].Destroy();
			}
			Dyings.Push(a);
		}
	}
	
	Override Void WorldThingSpawned(WorldEvent e)
	{
		if(!MRGoreParts_OnlyModsBlood)Return;
		
		if(e.Thing is 'Blood'||e.Thing is 'BloodSplatter'||e.Thing is 'AxeBlood'||Actor.GetReplacement("Blood")==e.Thing.GetClass()
			||e.Thing is RemoveBloodBase)
		{
			DoOtherBlood(e.Thing);
			Return;
		}
		
		For(int i=0;i<RemoveBloods.Size();i++)
		{
			if(e.Thing is RemoveBloods[i]){DoOtherBlood(e.Thing);Return;}
		}
		
		//Console.Printf(e.Thing.GetClassName());
	}
	
	Void DoOtherBlood(Actor mo)
	{
		Color Col = Gameinfo.DefaultBloodColor;
		if(CVar.GetCVar("MRGoreParts_UseCustomColor", Players[ConsolePlayer]).GetBool())
		{
			Col = CVar.GetCVar("MRGoreParts_Color", Players[ConsolePlayer]).GetInt();
		}
		
		if(CVar.GetCVar("MRGoreParts_Quake2", Players[ConsolePlayer]).GetBool())
			For(Int i=0;i<Random(6, 9)*CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();i++)
			{
				Float Bright = FRandom(.6, 2);
				mo.A_SpawnParticle(Color(int(col.r*Bright), int(col.g*Bright), int(col.b*Bright)), SPF_RelVel, 25, FRandom(1.5, 2.5), mo.AngleTo(Players[ConsolePlayer].Camera),
					Xoff:FRandom(-1.5, 1.5), FRandom(-1.5, 1.5), FRandom(4, 7), .1,0,.5, 0,0,-.05);
			}
		
		if(MRGoreParts_OnlyModsBlood>1){mo.Destroy();Return;}
		
		mo.A_SetRenderStyle(0, STYLE_NONE);
	}
	
	Override Void NetworkProcess(ConsoleEvent e)
	{
		if(e.name ~== "MRGP_UpdateEffects")
		{
			UpdateEffects();
		}
	}
}

Class MR_GoreParticlesDeathHandler: Thinker
{
	Color Bld;
	Bool Sos, Artery;
	Float Mid;
	Actor Owner;
	int Age;
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(!Owner)Return;
		Mid = Owner.Height*.5;
		MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		Owner.A_StartSound(Handler.SpraySound, CHAN_AUTO);
	}
	
	Override Void OnDestroy()
	{
		MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		Handler.Dyings.Delete(Handler.Dyings.Find(Self));
		Super.OnDestroy();
	}

	Override Void Tick()
	{
		if(Age>60||!Owner){Destroy();Return;}
		Age++;
		Super.Tick();
		
		TextureID Sprt = Owner.CurState.GetSpriteTexture(0);
		
		if(Sprt.IsValid())
		{
			
			Float y = Texman.CheckRealHeight(Sprt)*.9;
			y *= Owner.Scale.Y;
			
			Float Posy = Y;
			Double Pitch = -90;
			if(Mid<Y)
			{
				Pitch = -(Mid/y)*90;
				//Mid = Pitch;
			}
			
			Double Angle = Owner.Angle;
			if(!MRGoreParts_Voxel)Angle = Owner.AngleTo(Players[ConsolePlayer].Camera);
			
			if(Random(-200+Artery*160, 70)>Age)
			{
				if(MRGoreParts_Multiplayer)
				{
					MR_GoreParticlesFlyingBloodMultiplayer a = MR_GoreParticlesFlyingBloodMultiplayer(Owner.Spawn("MR_GoreParticlesFlyingBloodMultiplayer", Owner.pos + (0,0,Posy)));
					a.Col = Bld;
					a.Vel3DFromAngle(Random(3, 5), Angle+Random(-50, 50), -Pitch);
				}
				else
				{
					MR_GoreParticlesFlyingBlood a = MR_GoreParticlesFlyingBlood(Owner.Spawn("MR_GoreParticlesFlyingBlood", Owner.pos + (0,0,y)));
					a.Col = Bld;
					a.Vel3DFromAngle(Random(3, 5), Angle+Random(-50, 50), -Pitch);
				}
			}
			if(Age<Random(-40, 60))
			{
				MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
				if(Handler.Effects.Size()>0)
					Handler.Effects[Random(0, Handler.Effects.Size()-1)].SpawnEffect(Owner, 0, Angle, Pitch, Bld, 1, 1.5, (0,0,Y*.9));
				//MR_GoreParticlesHandler.MRParticleBloodSplash(Owner, Angle, Pitch, Random(-25+Artery*17, 1)*Random(3, 14), Bld, 0, 1, (0,0,Posy));
			}
		}
	}
}