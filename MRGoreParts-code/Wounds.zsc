/*
	Bleeding wounds
*/

Class MR_GoreParticlesWound: Thinker
{
	Vector3 Locs[MRGP_MaxWounds];
	float Ages[MRGP_MaxWounds];
	Double Angles[MRGP_MaxWounds];
	Double Heights[MRGP_MaxWounds];
	Color Col;
	Actor Owner;
	
	Bool MRGPartsCheckDraw()
	{
		Let Plr = Players[ConsolePlayer];
		if(!Plr.Camera)Return false;
		if(!CVar.GetCVar("MRGoreParts_Draw", Plr).GetBool())Return false;
		
		if(!Owner)Return CVar.GetCVar("MRGoreParts_Draw", Plr).GetBool();
		
		
		Return Owner.CheckSight(Plr.Camera) && abs(Actor.DeltaAngle(Plr.Camera.Angle, Plr.Camera.AngleTo(Owner)))<120;
	}
	
	Override Void OnDestroy()
	{
		Let Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		Handler.Wounds.Delete(Handler.Wounds.Find(Self));
		Handler.Wounded.Delete(Handler.Wounded.Find(Owner));
		Super.OnDestroy();
	}
	
	Override Void Tick()
	{
		if(!Owner){Destroy();Return;}
		TextureID Sprt = Owner.CurState.GetSpriteTexture(0);//Abs(Round(Actor.DeltaAngle(Owner.AngleTo(Players[ConsolePlayer].Camera), Owner.Angle)*2.07/24)));
		//Console.Printf(""..(Actor.DeltaAngle(Owner.AngleTo(Players[ConsolePlayer].Camera), Owner.Angle)*1.07/24));
		//if(!Sprt.IsValid())Sprt = Owner.CurState.GetSpriteTexture(0);
		
		if(!Sprt.IsValid())Return;
		
		Float Z = Texman.CheckRealHeight(Sprt);
		Z *= Owner.Scale.Y;
		Vector2 Size = Texman.GetScaledOffset(Sprt);
		
		Double Angle = Owner.Angle;
		if(Owner.Health<1 && !MRGoreParts_Voxel)
			Angle = Owner.AngleTo(Players[ConsolePlayer].Camera);
		
		int MaxBlood = MRGP_MaxWounds;
		
		int Wounds;
		
		int Corpse=2;
		if(Owner.Health<1)
		{
			Corpse = CVar.GetCVar("MRGoreParts_CorpseWounds", Players[ConsolePlayer]).GetInt();
		}
		
		For(int i=0;i<Locs.Size();i++)
		{
			if(Ages[i]>0)
			{
					
				Ages[i]-=Random(1, 3);
				if(Ages[i]<0){Ages[i]=0;Continue;}
				Wounds++;
				if(Corpse==0)Continue;
				Bool Draw = MRGPartsCheckDraw();
				if(!(Owner is 'PlayerPawn') && Draw){
					For(int j=0;j<2;j++)Owner.A_SpawnParticle(Color(int(int(Col.R*1.5)*Min(1, Ages[i]/(35*6))),int(int(Col.G*1.5)*Min(1, Ages[i]/(35*6))),int(int(Col.B*1.5)*Min(1, Ages[i]/(35*6)))), SPF_RELPOS, 1, Ages[i]/(35*15)*2, Angle, Locs[i].X, Locs[i].Y, Min(Z, Locs[i].Z),
						Owner.Vel.X, Owner.Vel.Y, Owner.Vel.Z);
				}
				
				int Rand = CRandom(0, 5);
				
				if(35*CRandom(3, 40)<Ages[i] && Rand>0 && MaxBlood>0)
				{
					MaxBlood--;
					if(Draw && Corpse>1)For(float j=0;j<CRandom(1, 5);j++)Owner.A_SpawnParticle(Col, SPF_RELPOS, 30, Ages[i]/(35*15)*2, Angle, Locs[i].X, Locs[i].Y, Min(Z, Locs[i].Z-j*.5*(Ages[i]/(35*15))),
						Owner.Vel.X, Owner.Vel.Y, Owner.Vel.Z, 0,0,-.3);
					if(CVar.GetCVar("MRGoreParts_FloorSpots", Players[ConsolePlayer]).GetInt()>0 && Draw && Corpse>1)
					{
						Vector2 Pos = Owner.Pos.XY;
						if(Owner.Health>0||MRGoreParts_Voxel)
						{
							Pos += Actor.AngleToVector(Owner.Angle, Locs[i].X);
							Pos += Actor.AngleToVector(Owner.Angle-90, Locs[i].Y);
						}
						else
						{
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera), 1);
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera)-90, Locs[i].Y);
						}
						Float FloorZ = LevelLocals.PointInSector(Pos).FloorPlane.ZatPoint(Pos);

						if(35*15-Ages[i]>(Locs[i].Z-FloorZ)/4)
						{
							Owner.A_SpawnParticle(Col, SPF_RELPOS, CVar.GetCVar("MRGoreParts_SpotsTime", Players[ConsolePlayer]).GetInt()*35, Ages[i]/(35*15)*2, Angle, Locs[i].X+CFRandom(-1, 1), Locs[i].Y+CFRandom(-1, 1), 1-(Owner.Pos.Z-FloorZ));
							MR_GoreParticlesHandler Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
							Owner.A_StartSound(Handler.DripSound, CHAN_AUTO, Volume:.2, attenuation: ATTN_STATIC);
						}
					}
					if(Ages[i]>35*3)//Random(0, 10)>7 && Ages[i]>35*3)
					{
						Double Angl = VectorAngle(Locs[i].X, Locs[i].Y);
						Vector2 Pos = (0,0);
						if(Owner.Health>0||MRGoreParts_Voxel)
						{
							Pos += Actor.AngleToVector(Owner.Angle, Locs[i].X);
							Pos += Actor.AngleToVector(Owner.Angle-90, Locs[i].Y);
						}
						else
						{
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera), 1);
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera)-90, Locs[i].Y);
						}
						MR_GoreParticlesEffect_SimpleSplash Effect = New('MR_GoreParticlesEffect_SimpleSplash');
						Effect.SpawnEffect(Owner, 0, Angle, Owner.Health>0?0:-90, Col, .5, .5, (Pos.X, Pos.Y, Min(Z, Locs[i].Z)-5));
						Effect.Destroy();
					}
				}
			}
		}
		if(Wounds<1)Destroy();
	}
}