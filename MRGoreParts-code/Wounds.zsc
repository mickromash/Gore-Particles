/*
	Bleeding wounds
*/

Class MR_GoreParticlesWound: MR_GoreParticlesThinker
{
	Vector3 Locs[MRGP_MaxWounds];
	Float Ages[MRGP_MaxWounds], Fov;
	Double Angles[MRGP_MaxWounds], Heights[MRGP_MaxWounds];
	Color Col;
	Actor Owner;
	int Fuzzy, 
		Spot;//Spawn spots every third drop
		
	Override Void OnDestroy()
	{
		if(!Handler)Return;
		if(Handler.Wounded.Find(Owner)!=Handler.Wounded.Size())Handler.Wounded.Delete(Handler.Wounded.Find(Owner));
		if(Handler.Wounds.Find(Self)!=Handler.Wounds.Size())Handler.Wounds.Delete(Handler.Wounds.Find(Self));
		Super.OnDestroy();
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(!Handler)Return;
		Fov = CVar.FindCVar("FOV").GetFloat();
		Handler.Wounded.Push(Owner);
		Handler.Wounds.Insert(Handler.Wounded.Find(Owner), Self);
		if(MRGoreParts_FuzzyBlood && (Owner.GetRenderStyle() == STYLE_OptFuzzy||Owner.GetRenderStyle() == STYLE_Fuzzy))Fuzzy = STYLE_Shadow;
		Owner.A_StartSound(Handler.WoundSound, CHAN_AUTO, Volume:MRGoreParts_SndVol*.5, attenuation:ATTN_STATIC);
	}
	
	Override Void Tick()
	{
		if(!Owner){Destroy();Return;}
		if(!TickCheck())Return;
		TextureID Sprt = Owner.CurState.GetSpriteTexture(0);//Abs(Round(Actor.DeltaAngle(Owner.AngleTo(Players[ConsolePlayer].Camera), Owner.Angle)*2.07/24)));
		//Console.Printf(""..(Actor.DeltaAngle(Owner.AngleTo(Players[ConsolePlayer].Camera), Owner.Angle)*1.07/24));
		//if(!Sprt.IsValid())Sprt = Owner.CurState.GetSpriteTexture(0);
		
		if(!Sprt.IsValid())Return;
		
		Vector2 Size = Texman.GetScaledOffset(Sprt);
		
		Double Angle = Owner.Angle;
		if(Owner.Health<1 && !MRGoreParts_Voxel)
			Angle = Owner.AngleTo(Players[ConsolePlayer].Camera);
		
		int MaxBlood = MRGP_MaxWounds;
		
		int Wounds;
		
		int Corpse=2;
		if(Owner.Health<1)
		{
			Corpse = MRGoreParts_CorpseWounds;
		}

		For(int i=0;i<Locs.Size();i++)
		{
			if(Ages[i]>0)
			{
				Float Z = Locs[i].Z*Owner.Height;
				if(Owner.Health<1)Z = Locs[i].Z*Texman.CheckRealHeight(Sprt)*Owner.Scale.Y;
				Ages[i]-=CRandom(1, 3);
				if(Ages[i]<0){Ages[i]=0;Continue;}
				Wounds++;
				if(Corpse==0)Continue;
				Bool Draw = MRGPartsCheckDraw();
				//Console.Printf("InitZ: "..Locs[i].Z.." Z: "..Z);
				if(!(Owner is 'PlayerPawn') && Draw){//Wound
					Color Col = Color(int(Col.R*MRGoreParts_Brightness),int(Col.G*MRGoreParts_Brightness),int(Col.B*MRGoreParts_Brightness));
					For(int j=0;j<2;j++)Owner.A_SpawnParticleEx(Color(int(int(Col.R*1.5)*Min(1, Ages[i]/(35*6))),int(int(Col.G*1.5)*Min(1, Ages[i]/(35*6))),int(int(Col.B*1.5)*Min(1, Ages[i]/(35*6)))),
						Texman.CheckForTexture("glpart"), Fuzzy, SPF_RELPOS, 1, Ages[i]/(35*15)*2, Angle, Locs[i].X,Locs[i].Y,Z,
						Owner.Vel.X,Owner.Vel.Y,Owner.Vel.Z, StartAlphaf:MRGoreParts_Alpha, FadeStepf:0);
				}
				
				int Rand = CRandom(0, 5);
				
				if(35*CRandom(3, 40)<Ages[i] && Rand>0 && MaxBlood>0)
				{
					MaxBlood--;
					if(Draw && Corpse>1)For(float j=0;j<CRandom(1, 5);j++){//Dripping blood
						Float Bright = MRGoreParts_Brightness*CFRandom(.9,2);
						Owner.A_SpawnParticleEx(Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright)),
							Texman.CheckForTexture("glpart"), Fuzzy, SPF_RELPOS, 30, Ages[i]/(35*15)*2, Angle, Locs[i].X,Locs[i].Y,Z-j*.5*(Ages[i]/(35*15)),
							Owner.Vel.X,Owner.Vel.Y,Owner.Vel.Z, 0,0,-.3, MRGoreParts_Alpha);
					}
					if(MRGoreParts_FloorSpots && Draw && Corpse>1)//Spots
					{
						if(Spot>1){
							Vector2 Pos = Owner.Pos.XY;
							if(Owner.Health>0||MRGoreParts_Voxel)
							{
								Pos += Actor.AngleToVector(Owner.Angle, Locs[i].X);
								Pos += Actor.AngleToVector(Owner.Angle-90, Locs[i].Y);
							}
							else
							{
								Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera), 1);
								Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera)-90, Locs[i].Y);
							}
							Float FloorZ = LevelLocals.PointInSector(Pos).FloorPlane.ZatPoint(Pos);

							if(35*15-Ages[i]>(Locs[i].Z-FloorZ)/4)
							{
								Float Bright = MRGoreParts_Brightness*CFRandom(.8,1.8);
								Owner.A_SpawnParticleEx(Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright)), Texman.CheckForTexture("glpart"), Fuzzy, SPF_RELPOS, MRGoreParts_SpotsTime*35, 
									Ages[i]/(35*15)*2, Angle, Locs[i].X+CFRandom(-1, 1),Locs[i].Y+CFRandom(-1, 1),1-(Owner.Pos.Z-FloorZ),
									StartAlphaf:MRGoreParts_Alpha, FadeStepf:MRGoreParts_LowAlpha?0:-1, SizeStep:MRGoreParts_LowAlpha?-((Ages[i]/(35*15)*2)/(MRGoreParts_SpotsTime*35)):0);
								Owner.A_StartSound(Handler.DripSound, CHAN_AUTO, Volume:.2*MRGoreParts_SndVol, attenuation: ATTN_STATIC);
							}
							Spot=0;
						}
						else Spot++;
					}
					if(Ages[i]>35*3 && Draw)//CRandom(0, 10)>7 && Ages[i]>35*3)
					{//Splash
						Double Angl = VectorAngle(Locs[i].X, Locs[i].Y);
						Vector2 Pos = (0,0);
						if(Owner.Health>0||MRGoreParts_Voxel)
						{
							Pos += Actor.AngleToVector(Owner.Angle, Locs[i].X);
							Pos += Actor.AngleToVector(Owner.Angle-90, Locs[i].Y);
						}
						else
						{
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera), 1);
							Pos += Actor.AngleToVector(Owner.AngleTo(Players[ConsolePlayer].Camera)-90, Locs[i].Y);
						}
						int Fuzz = Fuzzy;
						if(Fuzz>0)Fuzz = SGPF_Fuzzy;
						MR_GoreParticlesEffect.SpawnEffect('MR_GoreParticlesEffect_SimpleSplash', Owner, Fuzz, Angle, Owner.Health>0?0:-90, Col, .5, .5, 1, (Pos.X, Pos.Y, Z-5));
					}
				}
			}
		}
		if(Wounds<1)Destroy();
	}
}