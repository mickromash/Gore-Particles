/*
	Blood effects actors(kinda) and classes
*/

Class MR_GoreParticlesFlyingBlood: MR_GoreParticlesThinker//Quake gibs blood stream (basically client side actor)
{
	Vector3 Pos, Prev, Vel;
	Color Col;
	int Age, RenderStyle;
	Double Gravity, Scale, FOV;
	
	Static Double AngleToVector2(Vector2 Pos, Vector2 Dir)
	{
		Vector2 Dif = Levellocals.Vec2Diff(Pos, Dir);
		
		Return VectorAngle(Dif.X, Dif.Y);
	}
	
	Static Double PitchToVector3(Vector3 Pos, Vector3 Dir)
	{
		Vector3 Dif = Levellocals.Vec3Diff(Pos, Dir);
		
		Return -atan2(Dif.Z, Dif.XY.Length());
	}
		
	Bool CheckSight()
	{
		Let Plr = Players[ConsolePlayer].Camera;
		
		if(!Plr.Player)Return true;
		
		Vector3 Dir = (Plr.Pos.XY, Plr.Player.ViewZ);
		
		Vector3 direct = (Actor.AngleToVector(AngleToVector2(Pos.XY, Dir.XY), cos(PitchToVector3(Pos, Dir))), -sin(PitchToVector3(Pos, Dir)));
		Vector3 Dist = Level.Vec3Diff(Pos, Dir);
		
		let tracer = new('MR_GoreParticlesSightTracer');
		if(!tracer)return false;
		tracer.Trace(Pos, Level.PointInSector(Pos.XY), direct, Dist.Length(), 0, Line.ML_BLOCKEVERYTHING);
		
		Return Tracer.HitPlayer;
	}
	
	Bool MRGPartsCheckDraw()
	{
		if(!MRGoreParts_Draw||!MRGoreParts_DrawFlyingBlood)Return false;
				
		Let Plr = Players[ConsolePlayer].Camera;
		if(!Plr)Return false;
			
		vector2 Dif = Level.Vec2Diff(Plr.Pos.XY, Pos.XY);
		
		if(abs(Actor.DeltaAngle(AngleToVector2(Plr.Pos.XY, Pos.XY), Plr.Angle))>FOV && Dif.Length()>Plr.Radius*2)Return false;
		
		Return CheckSight();
	}
	
	Static MR_GoreParticlesFlyingBlood Create(Vector3 Pos, Color Col, int Flags, Float Gravity=.4, Float Scale=3, Vector3 Vel=(0,0,0))
	{
		Let a = New('MR_GoreParticlesFlyingBlood');
		a.Init();
		if(a.bDestroyed)Return Null;
		a.Pos = Pos;
		a.Vel = Vel;
		a.Col = Col;
		a.Gravity = Gravity;
		a.Scale = Scale;
		if(Flags&SGPF_Fuzzy)a.RenderStyle = STYLE_Shadow;
		Return a;
	}
	
	Virtual Void Init()
	{
		if(!MRGoreParts_DrawFlyingBlood){Destroy();Return;}
		Handler = MR_GoreParticlesHandler(EventHandler.Find("MR_GoreParticlesHandler"));
		Handler.Streams.Push(Self);
		Gravity = .4;
		Scale = 3;
		Fov = CVar.FindCVar("FOV").GetFloat();
	}
	
	Override Void OnDestroy()
	{
		if(!Handler)Return;
		Handler.Streams.Delete(Handler.Streams.Find(Self));
		Super.OnDestroy();
	}
	
	Override Void Tick()
	{
		if(Level.IsFrozen())Return;
		Age++;
		if(Age>35*3){Destroy();Return;}
		
		Bool Draw = MRGPartsCheckDraw();
		
		Double Angle = VectorAngle(Vel.X, Vel.Y);
		Double Pitch = -atan2(Vel.Z, Vel.XY.Length());
		
		Vector3 dir = (Actor.AngleToVector(Angle, cos(Pitch)), -sin(Pitch));
		
		Bool Landed = false;
		
		let tracer = new('MR_GoreParticlesSightTracer');

		tracer.CheckSurface = true;
		tracer.Trace(Pos, Level.PointInSector(Pos.XY), dir, Vel.Length()+5, 0, Line.ML_BLOCKEVERYTHING, true);
		
		if(Tracer.HitType!=TRACE_HitNone){
			if(Draw)HitSurface(Tracer.HitType, Tracer.HitLine, Tracer.HitPos);
			Landed = true;
		}
		
		Sector CurSector = LevelLocals.PointInSector(Pos.XY+Vel.XY);
		
		if(CurSector){
			if(CurSector.CenterFloor()+2>=Pos.Z+Vel.Z){if(Draw)HitSurface(TRACE_HitFloor, Null, (Pos.XY+Vel.XY, CurSector.CenterFloor()));Landed = true;}
			else if(CurSector.CenterCeiling()-2<=Pos.Z+Vel.Z){if(Draw)HitSurface(TRACE_HitCeiling, Null, (Pos.XY+Vel.XY, CurSector.CenterCeiling()));Landed = true;}
		}
		
		if(Landed){Destroy();Return;}
		
		Prev = Pos;
		Pos += Vel;
		
		if(Draw){
			DrawTrail();
		}
		
		Vel.Z -= Gravity;
	}
	
	Virtual Void DrawTrail()
	{
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		Float Brightnes = MRGoreParts_Brightness*CFrandom(.5, 1.5);
		
		Color CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
		
		Double Dist = 1;
		if(Players[ConsolePlayer].Camera){
			Vector3 Dif = Level.Vec3Diff(Pos, Players[ConsolePlayer].Camera.Pos);
			Dist = Max(1, 1+(Dif.Length()-80)*.0015*MRGoreParts_Distance);
		}
		
		Float Bright = MRGoreParts_Brightness*CFrandom(.5, 1.5);
		Color TempCol = Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright));
		
		SpawnParticle(TempCol, Glow, RenderStyle, 1, Scale*MRGoreParts_Size*Dist, 0, Pos, Vel, Alpha:MRGoreParts_Alpha, SizeStep:0);
		
		
		Vector3 Dif = Level.Vec3Diff(Pos, Prev);
		For(float i=0;i<Dif.Length();i+=Scale*.5*Max(1, Dist*.01))
		{
			Float Step = i;
			Step /= Dif.Length();

			Float Brightes = MRGoreParts_Brightness*CFrandom(.5, 1.5);
			CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
			
			Float Rand = CFRandom(-Scale*MRGoreParts_Size*.1, Scale*MRGoreParts_Size*.1);
			
			SpawnParticle(CurCol, Glow, RenderStyle, 20, Scale*MRGoreParts_Size*Dist,
				0, Pos + (Dif.X*Step+Vel.X*.5+Rand, Dif.Y*Step+Vel.Y*.5+Rand, Dif.Z*Step+Vel.Z*.5+Rand), Accel:(0,0,-Gravity*.5), Alpha:MRGoreParts_Alpha,
					SizeStep:-Scale*MRGoreParts_Size*.9*.05);
		}
	}
	
	Virtual Void HitSurface(int HitType, Line HitLine=Null, Vector3 HitPos=(0,0,0))
	{
		int Ofst = -1;
		int Glow = 0;
		S_StartSoundAt(Pos, Handler.DripSound, CHAN_AUTO, Volume:MRGoreParts_SndVol, attenuation:ATTN_STATIC);
		if(!MRGoreParts_Draw)Return;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		Switch(HitType){
		
			Case TRACE_HitWall:
				Double Angle = VectorAngle(HitLine.Delta.X, HitLine.Delta.Y);
				
				For(int i=0;i<CRandom(5, 7);i++){//Splash
					
					Float Pitch = CRandom(0, 40);
					Float Bright = MRGoreParts_Brightness*CFrandom(.5, 1.5);
					Color TempCol = Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright));
					int Life = CRandom(15, 21);
					Float Size = CFRandom(.2, .5)*Scale*MRGoreParts_Size;
										
					SpawnParticle(TempCol, Glow, RenderStyle, Life, Size, 0, HitPos - (0,0,i),
						-Vel*CFRandom(.2, .4)+(Actor.AngleToVector(Angle-90+CRandom(-50, 50), 2), Sin(CRandom(0, 50))*2),
						(0,0,-.4), MRGoreParts_Alpha, 0, -(Size/Life));
				}
				
				if(MRGoreParts_FloorSpots<2)Return;
				For(int i=0;i<CRandom(4, 7);i++){//Spots
				
					Float Bright = MRGoreParts_Brightness*CFrandom(.5, 1.5);
					Color TempCol = Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright));
					
					Float Size = CFRandom(.6, 1.1)*Scale*MRGoreParts_Size;
					
					SpawnParticle(TempCol, Glow, RenderStyle, MRGoreParts_SpotsTime*35, Size, 0, HitPos + (Actor.AngleToVector(Angle, CFRandom(-3, 3)), CFRandom(-3, 3)-i),
						(0,0,-.01), Alpha:MRGoreParts_Alpha, Fade:MRGoreParts_LowAlpha?0:-1, SizeStep:(MRGoreParts_LowAlpha)?-(Size/(MRGoreParts_SpotsTime*35)):0);
				}
				Break;
				
			Case TRACE_HitFloor:
				Ofst = 1;
			Case TRACE_HitCeiling:
				
				For(int i=0;i<CRandom(5, 7);i++){//Splash
					
					Float Bright = MRGoreParts_Brightness*CFrandom(.5, 1.5);
					Color TempCol = Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright));
					
					int Life = CRandom(15, 21);
					Float Size = CFRandom(.2, .5)*Scale*MRGoreParts_Size;
					
					SpawnParticle(TempCol, Glow, RenderStyle, Life, Size, 0,
						HitPos - (0,0,i), -Vel*CFRandom(.2, .4)+(Actor.AngleToVector(Angle-90+CRandom(-50, 50), 2), Sin(CRandom(0, 50))*Ofst*2),
						(0,0,-.4), MRGoreParts_Alpha, 0, -(Size/Life));
				}
				
				if(MRGoreParts_FloorSpots<2)Return;
				For(int i=0;i<CRandom(4, 7);i++){//Spots
				
					Float Bright = MRGoreParts_Brightness*CFrandom(.5, 1.5);
					Color TempCol = Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright));

					Float Size = CFRandom(.6, 1.1)*Scale*MRGoreParts_Size;
					
					SpawnParticle(TempCol, Glow, RenderStyle, MRGoreParts_SpotsTime*35, Size, 0,
						HitPos + (CFRandom(-3, 3), CFRandom(-3, 3), Ofst), Alpha:MRGoreParts_Alpha, Fade:(MRGoreParts_LowAlpha)?0:-1,
						SizeStep:(MRGoreParts_LowAlpha)?-(Size/(MRGoreParts_SpotsTime*35)):0);
				}
				if(HitType == TRACE_HitCeiling)For(int i=0;i<Random(0, 3)*4;i++)//Dripping from ceiling
				{
					
					Float Bright = MRGoreParts_Brightness*CFrandom(.5, 1.5);
					Color TempCol = Color(int(Col.R*Bright),int(Col.G*Bright),int(Col.B*Bright));
					
					Float Size = CFRandom(.2, .4)*Scale*MRGoreParts_Size;
					
					SpawnParticle(TempCol, Glow, RenderStyle, 40, Size, 0,
						HitPos + (CFRandom(-3, 3), CFRandom(-3, 3), Ofst), Accel:(0,0,-CFRandom(.1, .4)),
						Alpha:MRGoreParts_Alpha, SizeStep:-(Size/40.));
				}
				Break;
		}
	}
}

class MR_GoreParticlesSightTracer : LineTracer
{
	Bool HitPlayer, CheckSurface;
	int HitType;
	Vector3 HitPos;
	Line HitLine;
	
	override ETraceStatus TraceCallback()
	{
		HitType = TRACE_HitNone;
		switch(results.HitType)
		{
			case TRACE_HitActor:
				if(CheckSurface)Return TRACE_Skip;
				if(results.HitActor && results.HitActor == Players[ConsolePlayer].Camera)
				{
					HitPlayer = true;
					Return TRACE_Stop;
				}
				Return TRACE_Skip;
			
			case TRACE_HitWall:
				if(CheckSurface)HitLine = Results.HitLine;
			case TRACE_HitFloor://Doesn't work for some reason
			case TRACE_HitCeiling:
				if(CheckSurface){HitType = Results.HitType;HitPos = results.HitPos;Return TRACE_Stop;}
			case TRACE_HasHitSky:
				Return TRACE_Stop;
		}

		return TRACE_Skip;
	}
}


enum MRGP_EffectFlag{
	SGPF_NoDist = 1,//Distance won't affect particles velocity and sizes
	SGPF_FixAmount = 2,//Ignore particles amount CVar
	SGPF_NoVel = 4,
	SGPF_Fuzzy = 8,
	SGPF_TEST = 16,
};

Class MR_GoreParticlesEffect play abstract
{
	Virtual int DoParticleEffect(Actor mo, int Flags = 0, Double Angle = 0, Double Pitch = 0, Color Col = 0, double Amount = 1, Double Scale = 1, Double Alpha = 1, Vector3 Offset = (0,0,0), Double LifeM = 1, Double MoVel = 0)
	{Return 0;}
	/*
		mo - actor that spawns particles
		Amount - particles amount multiplier
		Flags - check MRGP_EffectFlag enum
		Angle - particles direction angle
		Pitch - particles direction pitch
		Col - particles base color
		Scale - particles sizes multiplier
		Alpha - Alpha multiplier
		Offset - offsets particles spawn point from actor position (absolute)
		LifeM - particles lifetime multiplier
		MoVel - multiplies actor velocity that will be added to particles
	*/
	Static Void SpawnEffect(Class<Object> Effect, Actor mo, int Flags = 0, Double Angle = 0, Double Pitch = 0, Color Col = 0, double Amount = 1, Double Scale = 1, Double Alpha = 1, Vector3 Offset = (0,0,0), Double LifeM = 1, Double MoVel = 0)
	{
		if(!mo)Return;
		MR_GoreParticlesEffect Spawner = MR_GoreParticlesEffect(New(Effect));
		
		if(Spawner){
			Spawner.DoParticleEffect(mo, Flags, Angle, Pitch, Col, Amount, Scale, Alpha, Offset, LifeM, MoVel);
			Spawner.Destroy();
		}
	}

	//Data for included effects menu
	Clearscope Virtual String GetName(){Return StringTable.Localize("$"..GetClassName());}
	Clearscope Virtual Bool UsesAlpha(){Return false;}
	
	int MinParticles, MaxParticles;
	Void CountParticles(int cycles=1)
	{
		MaxParticles = MinParticles = -1;
		For(int i=0;i<cycles;i++){
			int Amt = DoParticleEffect(players[consolePlayer].Camera, SGPF_TEST);
			
			if(MaxParticles==-1){MinParticles = MaxParticles = Amt;Continue;}
			
			if(MinParticles>Amt)MinParticles = Amt;
			else if(MaxParticles<Amt)MaxParticles = Amt;
		}
	}
}

Class MR_GoreParticlesEffect_SimpleSplash: MR_GoreParticlesEffect
{
	Override int DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return 0;
		
		if(!MRGoreParts_Draw)Return 0;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return 0;
		
		int Particles;
		
		Bool Water = mo.WaterLevel>2;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		int Fuzzy = STYLE_NONE;
		if(Flags&SGPF_Fuzzy)Fuzzy = STYLE_Shadow;
		
		Float Mult = (CRandom(1, 3)*3+1)/Max(1, Dist*.1)*Amount;
		if(Water)Mult = Max(1, Mult*.5);
		
		For(float i1=0;i1<Mult;i1++)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .3);
			Vector3 Strn = (CFRandom(.1, 1), Cos(Ang)*Leng, Sin(Ang)*Leng);
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			if(Water)Vel *= .5;
			
			Float Life = Min(45, 10/Strn.Length())/MRGoreParts_Speed*LifeM;
			if(Water)Life *= 2;
			
			Double Size = CFRandom(.9, 3)*Dist*Scale*MRGoreParts_Size;
			Vector3 Accel = -Vel*CFRandom(.004, .01);
			
			
			
			Float Bright = Max(MRGoreParts_Brightness*.5, Min(MRGoreParts_Brightness*1.5, 1.5+Vel.Z*1.5));
			Bright += CFRandom(-.05, .05);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			Vector3 Ofst = Vel;
			Ofst *= Mult/(i1+1);
			
			if(!(Flags&SGPF_TEST))mo.A_SpawnParticleEx(ColTmp, Texman.CheckForTexture("glpart"), Fuzzy, Glow, Life, Size, 0, Ofst.X*CFRandom(.3, .7)+Offset.X,Ofst.Y*CFRandom(.3, .7)+Offset.Y,5+Ofst.Z*CFRandom(.3, .7)+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X, Accel.Y, Accel.Z, MRGoreParts_Alpha, 0, -(Size/Life));
			Particles++;
		}
		
		Return Particles;
	}
}

Class MR_GoreParticlesEffect_Sprays: MR_GoreParticlesEffect
{}

Class MR_GoreParticlesEffect_Mist: MR_GoreParticlesEffect
{
	Override int DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return 0;
		
		if(!MRGoreParts_Draw)Return 0;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return 0;
		
		int Particles;
		
		Bool Water = mo.WaterLevel>2;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		int Fuzzy = STYLE_NONE;
		if(Flags&SGPF_Fuzzy)Fuzzy = STYLE_Shadow;
		
		int Amnt = CRandom(1, 4)/Max(1, Dist*.1)*2*Amount;
		if(Flags&SGPF_FixAmount)Amnt = Amount;
		
		For(int i=0;i<Amnt;i++)
		{
			Vector2 HorzStrn = (CFRandom(-.2, .2), CFRandom(-.2, .2));
			Vector3 Strn = (CFRandom(.05, .2), HorzStrn.X, HorzStrn.Y);
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel += mo.Vel*moVel;
			
			if(Water)Vel *=.5;
			
			Vector3 Accel = -Vel*CFRandom(.004, .01);
			
			Float Life = Min(50, 11/Strn.Length())/MRGoreParts_Speed*LifeM;
			
			if(Water)Life = Min(90, Life*2);
			
			Double Size = Scale*MRGoreParts_Size*(abs(HorzStrn.Length()*20))*Dist;
			if(Flags&SGPF_NoVel)Size = Scale*Dist;
			
			Float Bright = MRGoreParts_Brightness*CFrandom(.5, 1.5);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			Double PAlpha = CFRandom(.2, .4);
			if(Alpha!=1)PAlpha = Alpha;
			
			TextureId Texture;
			
			Switch(MRGoreParts_MistTexture)
			{
				Case 0:Texture = Texman.CheckForTexture("GParMst");Break;
				Default: Texture = Texman.CheckForTexture("GParMst"..MRGoreParts_MistTexture);Break;
				Case 3:Texture = Texman.CheckForTexture("glpart");Break;
			}
			
			if(!(Flags&SGPF_TEST))mo.A_SpawnParticleEx(ColTmp, Texture, Fuzzy, Glow, Life, Size, 0,
				Offset.X,Offset.Y,5+Offset.Z,
				Vel.X,Vel.Y,Vel.Z,
				Accel.X,Accel.Y,Accel.Z,
				PAlpha, PAlpha/Life, Size*MRGoreParts_Speed*.1*(Water?.5:1)
			);
			
			Particles++;
		}
		
		Return Particles;
	}
	
	Override Bool UsesAlpha(){Return true;}
}

Class MR_GoreParticlesEffect_BeautifulSpray: MR_GoreParticlesEffect
{
	Override int DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return 0;
		
		if(!MRGoreParts_Draw)Return 0;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return 0;
		
		int Particles;
		
		Bool Water = mo.WaterLevel>2;
		if(Water)Amount *= .5;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		int Fuzzy = STYLE_NONE;
		if(Flags&SGPF_Fuzzy)Fuzzy = STYLE_Shadow;
		
		Pitch -= CFRandom(5, 8);
		//Angle += CRandom(-30, 30);
		Double Forw = CFRandom(1.4, 3);
		Vector3 Strn;
		Double Size = CFRandom(1.2, 1.6)*MRGoreParts_Size*Dist;
		Float Life = CFRandom(35, 40)/MRGoreParts_Speed*LifeM;
		if(Water)Life *= 2;
							
		For(float j=.1;j<1.1;j+=.05*Max(1, Dist*.1)/Amount)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .1*j);
			Strn.X = Forw*j*.5;
			Strn.Y = -Cos(Ang)*Leng;
			Strn.Z = -Sin(Ang)*Leng;
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			
			Vector3 Accel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Accel *= CFRandom(.01, .02);
			Accel.XY += Actor.AngleToVector(Angle+90, -Strn.Y*.1);
			Accel.XY += Actor.AngleToVector(Angle, -Strn.Z)*Sin(Pitch);
			
			Accel = -Accel;
			Accel *= Dist;
			Accel *= Scale;
			
			if(Water){Vel *= .5;Accel *= .5;}
			
			Float Bright = Max(MRGoreParts_Brightness*.5, Min(MRGoreParts_Brightness*1.5, (Strn.Z/(.3*j)+.75)*2));
			Bright += CFRandom(-.05, .05);
			
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			
			if(!(Flags&SGPF_TEST))mo.A_SpawnParticleEx(ColTmp, Texman.CheckForTexture("glpart"), Fuzzy, Glow, Life+5, (Size+j*3)*CFRandom(.9, 1.1), 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X,Accel.Y,Accel.Z-(j-.1)*.015, MRGoreParts_Alpha, 0, -((Size+j*3)/Life));
			Life-=.5/MRGoreParts_Speed*LifeM;
			
			Particles++;
		}
		
		Return Particles;
	}
}

Class MR_GoreParticlesEffect_CurveLine: MR_GoreParticlesEffect
{
	Override int DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return 0;
		
		if(!MRGoreParts_Draw)Return 0;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return 0;
		Amount = Min(1.1, Amount);
		Float Dist = MRGP_DistanceMult;
		
		int Particles;
		
		Bool Water = mo.WaterLevel>2;
		if(Water)Amount *= .5;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		int Fuzzy = STYLE_NONE;
		if(Flags&SGPF_Fuzzy)Fuzzy = STYLE_Shadow;
		
		//Pitch -= CRandom(5, 40);
		//Angle += CRandom(-15, 15);
		Double Forw = CFRandom(.01, .2);
		Double Strn = CFRandom(.4, .6);
		Double Size = CFRandom(3.4, 3.7)*MRGoreParts_Size*Dist;
		Float Life = CFRandom(30, 34)/MRGoreParts_Speed*LifeM;
		if(Water)Life *= 2;
		Double StartLife = Life;
		
		Double Roll = CRandom(175, 360);
		
		float CircleLength = CRandom(120, 360);
		int CircleStart = CircleLength-180;//CFRandom(0, 360);
		
		For(float j=CircleStart;j<CircleStart+CircleLength;j+=Size*.75*Max(1, Dist*.1)/Amount)
		{
			Double Ang = (j+CFRandom(-1.5, 1.5))*Cos(Roll);
			Double Pit = (j+CFRandom(-1.5, 1.5))*Sin(Roll);
			
			Vector3 Vel = (Actor.AngleToVector(Ang, Strn)*Cos(-Abs(Pit)), -Sin(Pit)*Strn);
			Vel += (Actor.AngleToVector(Angle, Forw)*Cos(Abs(Pitch)), -Sin(Pitch)*Forw);
			Vel.XY += Actor.AngleToVector(Ang, Strn)*Sin(Pit);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Scale;
			Vel *= Dist;
			Vel += mo.Vel*moVel;
			
			Vector3 Accel = (CFRandom(-.001,.001),CFRandom(-.001,.001),CFRandom(-.001,.001)-.025+Vel.Z*.01);
			
			if(Water){Vel *= .5;Accel *= .5;}

			Float Bright = Max(MRGoreParts_Brightness*.5, Min(MRGoreParts_Brightness*1.5, 1.2+Sin(-Pit)*.5));
			Bright += CFRandom(-.05, .05);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));

			if(!(Flags&SGPF_TEST))mo.A_SpawnParticleEx(ColTmp, Texman.CheckForTexture("glpart"), Fuzzy, Glow, Life+5, Size*CFRandom(.9, 1.1), 0, Offset.X+CFRandom(-.5,.5)*Scale,Offset.Y+CFRandom(-.5,.5)*Scale,Offset.Z+CFRandom(-.5,.5)*Scale,
				Vel.X,Vel.Y,Vel.Z, Accel.X,Accel.Y,Accel.Z, MRGoreParts_Alpha, 0, -(Size/Life));

			Life -= (StartLife/(CircleLength/(Size*.75/Amount))*CFRandom(0, .8))/MRGoreParts_Speed;
			
			Particles++;
		}
		
		Return Particles;
	}
}

Class MR_GoreParticlesEffect_BeautifulSprayGrowing: MR_GoreParticlesEffect
{
	Override int DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return 0;
		
		if(!MRGoreParts_Draw)Return 0;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		
		int Particles;
		
		Bool Water = mo.WaterLevel>2;
		if(Water)Amount *= .5;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		int Fuzzy = STYLE_NONE;
		if(Flags&SGPF_Fuzzy)Fuzzy = STYLE_Shadow;
		
		Pitch -= CFRandom(5, 8);
		Angle += CRandom(-30, 30);
		Double Forw = CFRandom(1.4, 3);
		Vector3 Strn;
		Double Size = CFRandom(1.2, 1.6)*MRGoreParts_Size*Dist;
		Float Life = CFRandom(35, 40)/MRGoreParts_Speed*LifeM;
		if(Water)Life *= 2;
							
		For(float j=.1;j<1.1;j+=.05*Max(1, Dist*.1)/Amount)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .1*j);
			Strn.X = Forw*j*.25;
			Strn.Y = -Cos(Ang)*Leng;
			Strn.Z = -Sin(Ang)*Leng;
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			
			Vector3 Accel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Accel *= CFRandom(.01, .02);
			Accel.XY += Actor.AngleToVector(Angle+90, -Strn.Y*.1);
			Accel.XY += Actor.AngleToVector(Angle, -Strn.Z)*Sin(Pitch);
			
			Accel = -Accel;
			Accel *= Dist;
			Accel *= Scale;
			
			if(Water){Vel *= .5;Accel *= .5;}
			
			Float Bright = Max(MRGoreParts_Brightness*.5, Min(MRGoreParts_Brightness*1.5, (Strn.Z/(.3*j)+.75)*2));
			Bright += CFRandom(-.05, .05);
			
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			if(!(Flags&SGPF_TEST))mo.A_SpawnParticleEx(ColTmp, Texman.CheckForTexture("glpart"), Fuzzy, Glow, Life+5, (Size+j*3)*CFRandom(.9, 1.1), 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X,Accel.Y,Accel.Z-(j-.1)*.01, MRGoreParts_Alpha, 1.2/Life*MRGoreParts_Alpha, ((Size+j*3)/Life)*.05);
			Life-=.5/MRGoreParts_Speed*LifeM;
			
			Particles++;
		}
		
		Return Particles;
	}
	
	Override Bool UsesAlpha(){Return true;}
}

Class MR_GoreParticlesEffect_Sparks: MR_GoreParticlesEffect
{
	Override int DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return 0;
		
		if(!MRGoreParts_Draw)Return 0;
		
		if(mo.Waterlevel>2)
		{
			int Rand = Random(170, 200);
			MR_GoreParticlesEffect.SpawnEffect('MR_GoreParticlesEffect_Mist', mo, Flags, Angle, Pitch, Color(Rand,Rand,Rand), Amount, Scale, Alpha, Offset, LifeM, MoVel);
			Return 0;
		}
		
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return 0;
		
		int Particles;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		Float Mult = Max(1, (CRandom(1, 3))/Max(1, Dist*.1)*Amount);
		
		For(float i1=0;i1<Mult;i1++)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .3);
			Vector3 Strn = (CFRandom(.5, 2), Cos(Ang)*Leng, Sin(Ang)*Leng);
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			Float Life = FRandom(25, 35)/MRGoreParts_Speed*LifeM;//Min(25, 10/Strn.Length())/MRGoreParts_Speed*LifeM;
			Double Size = CFRandom(.7, .8)*Dist*MRGoreParts_Size*Scale;
			Vector3 Accel = -Vel*CFRandom(.004, .01);
			
			Color ColTmp = Color(255,Random(180, 255),Random(0, 80));
			Vector3 Ofst = Vel;
			Ofst *= Mult/(i1+1);
			
			if(!(Flags&SGPF_TEST))mo.A_SpawnParticle(ColTmp, SPF_FULLBRIGHT, Life, Size, 0, Ofst.X*CFRandom(.3, .7)+Offset.X,Ofst.Y*CFRandom(.3, .7)+Offset.Y,5+Ofst.Z*CFRandom(.3, .7)+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X, Accel.Y, Accel.Z-.4, 1, 0, -(Size/Life));
			
			Particles++;
		}
		
		Return Particles;
	}
}