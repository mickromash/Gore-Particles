/*
	Effects actors and classes
*/

Class MR_GoreParticlesFlyingBlood: Actor//Quake gibs blood stream
{
	Default{
		+NOINTERACTION
		+Missile
		-SKYEXPLODE
		+DONTSPLASH
		Gravity .3;
		Scale 3;
		Radius 3;
		Height 3;
	}
	
	Color Col;
	//Float Brightnes;
	
	Bool MRGPartsCheckDraw()
	{
		Let Plr = Players[ConsolePlayer];
		if(!Plr.Camera)Return false;
		if(!CVar.GetCVar("MRGoreParts_Draw", Plr).GetBool()||
			!CVar.GetCVar("MRGoreParts_FlyingBood", Plr).GetBool()||
			!CheckSight(Plr.Camera))Return false;
		
		Return abs(DeltaAngle(Plr.Camera.Angle, Plr.Camera.AngleTo(Self)))<CVar.GetCVar("FOV", Players[ConsolePlayer]).GetFloat();
	}

	States
	{
		Spawn:
			TNT1 A 1{
				Vel.Z -= Gravity;
				if(MRGPartsCheckDraw() && Scale.X>0)
				{
					int Glow = 0;
					if(CVar.GetCVar("MRGoreParts_FullBright", Players[ConsolePlayer]).GetBool())Glow = SPF_FULLBRIGHT;
					Float Brightnes = CFRandom(MRGP_MinBright, MRGP_MaxBright);
					
					Color CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
					
					A_SpawnParticle(CurCol, Glow, 1, Scale.X, 0, 0,0,0, Vel.X, Vel.Y, Vel.Z);
					
					Vector3 Dif = LevelLocals.Vec3Diff(Pos, Prev);
					For(float i=0;i<Dif.Length();i+=Scale.X*.25)
					{
						Float Step = i;
						Step /= Dif.Length();
						//if(i%2==0)
						Brightnes = CFRandom(MRGP_MinBright, MRGP_MaxBright);
						CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
						
						Float Rand = CFRandom(-Scale.X*.2, Scale.X*.2);
						
						A_SpawnParticle(CurCol, Glow, 25, Scale.X, 0,
							Dif.X*Step+Vel.X*.5+Rand,Dif.Y*Step+Vel.Y*.5+Rand,Dif.Z*Step+Vel.Z*.5+Rand,
							0,0,0,
							0,0,-Gravity*.5,
							1, -1, -Scale.X*.9*.05
						);
						//else A_SpawnParticle(Col, 0, 1, Scale.X, 0, Dif.X*Step,Dif.Y*Step,Dif.Z*Step, Vel.X, Vel.Y, Vel.Z);
					}
				}
			}
			Wait;
	}
}

enum MRGP_EffectFlag{
	SGPF_NODIST = 1,//Distance won't affect particles velocity and sizes
};

Class MR_GoreParticlesEffect play Abstract
{
	Virtual Void SpawnEffect(Actor mo, int Flags = 0, Double Angle = 0, Double Pitch = 0, Color Col = 0, double Amount = 1, Double Scale = 1, Vector3 Offset = (0,0,0), Double LifeM = 1, Double MoVel = 0)
	{}
	/*
		mo - actor that spawns particles
		Amount - particles amount multiplier
		Flags - check MRGP_EffectFlag enum
		Angle - particles direction angle
		Pitch - particles direction pitch
		Col - particles base color
		Scale - particles sizes multiplier
		Offset - offsets particles spawn point from actor position (absolute)
		LifeM - particles lifetime multiplier
		MoVel - multiplies actor velocity that will be added to particles
	*/
	Clearscope Virtual String GetName(){Return StringTable.Localize("$"..GetClassName());}//Effect name that will be displayedin the menu
}

Class MR_GoreParticlesEffect_SimpleSplash: MR_GoreParticlesEffect
{
	Override Void SpawnEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Vector3 Offset, Double LifeM, Double MoVel)
	{
		Amount *= CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0025*CVar.GetCVar("MRGoreParts_Distance", Players[ConsolePlayer]).GetFloat();
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(CVar.GetCVar("MRGoreParts_FullBright", Players[ConsolePlayer]).GetBool())Glow = SPF_FULLBRIGHT;
		
		Float Mult = (CRandom(1, 3)*3+1)*Amount;
		
		For(float i1=0;i1<Mult;i1++)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .3);
			Vector3 Strn = (CFRandom(.1, 1), Cos(Ang)*Leng, Sin(Ang)*Leng);
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			Float Life = Min(45, 10/Strn.Length())*LifeM;
			Double Size = CFRandom(.9, 3)*Dist*Scale;
			Vector3 Accel = -Vel*CFRandom(.004, .01);
			
			
			
			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, 1.5+Vel.Z*1.5));
			Bright += CFRandom(-.05, .05);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			Vector3 Ofst = Vel;
			Ofst *= Mult/(i1+1);
			
			mo.A_SpawnParticle(ColTmp, Glow, Life, Size, 0, Ofst.X*CFRandom(.3, .7)+Offset.X,Ofst.Y*CFRandom(.3, .7)+Offset.Y,5+Ofst.Z*CFRandom(.3, .7)+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X, Accel.Y, Accel.Z, 1, 0, -(Size/Life));
		}
	}
}

Class MR_GoreParticlesEffect_Sprays: MR_GoreParticlesEffect
{}

Class MR_GoreParticlesEffect_Mist: MR_GoreParticlesEffect
{
	Override Void SpawnEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Vector3 Offset, Double LifeM, Double MoVel)
	{
		Amount *= CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0025*CVar.GetCVar("MRGoreParts_Distance", Players[ConsolePlayer]).GetFloat();
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(CVar.GetCVar("MRGoreParts_FullBright", Players[ConsolePlayer]).GetBool())Glow = SPF_FULLBRIGHT;
		
		For(int i=0;i<CRandom(1, 4)*2*Amount;i++)
		{
			Vector2 HorzStrn = (CFRandom(-.2, .2), CFRandom(-.2, .2));
			Vector3 Strn = (CFRandom(.05, .2), HorzStrn.X, HorzStrn.Y);
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= Dist;
			Vel += mo.Vel*moVel;
			
			Double Life = Min(50, 11/Strn.Length())*LifeM;
			Double Size = Scale*(abs(HorzStrn.Length()*20))*Dist;
			Vector3 Accel = -Vel*CFRandom(.004, .01);
			
			Float Bright = CFRandom(.9, 1.4);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			Double Alpha = CFRandom(.2, .4);
			
			mo.A_SpawnParticle(ColTmp, Glow, Life, Size, 0, 0+Offset.X,0+Offset.Y,5+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X, Accel.Y, Accel.Z, Alpha, Alpha/Life, Size*.1);
		}
	}
}

Class MR_GoreParticlesEffect_BeautifulSpray: MR_GoreParticlesEffect
{
	Override Void SpawnEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Vector3 Offset, Double LifeM, Double MoVel)
	{
		Amount *= CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0025*CVar.GetCVar("MRGoreParts_Distance", Players[ConsolePlayer]).GetFloat();
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(CVar.GetCVar("MRGoreParts_FullBright", Players[ConsolePlayer]).GetBool())Glow = SPF_FULLBRIGHT;
		
		Pitch -= CFRandom(5, 8);
		Angle += CRandom(-30, 30);
		Double Forw = CFRandom(1.4, 3);
		Vector3 Strn;
		Double Size = CFRandom(1.2, 1.6)*Dist;
		Double Life = CFRandom(35, 40)*LifeM;
							
		For(float j=.1;j<1.1;j+=.05/Amount)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .1*j);
			Strn.X = Forw*j*.5;
			Strn.Y = -Cos(Ang)*Leng;
			Strn.Z = -Sin(Ang)*Leng;
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, (Strn.Z/(.3*j)+.75)*2));
			Bright += CFRandom(-.05, .05);
			
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			Vector3 Accel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Accel *= CFRandom(.01, .02);
			Accel.XY += Actor.AngleToVector(Angle+90, -Strn.Y*.1);
			Accel.XY += Actor.AngleToVector(Angle, -Strn.Z)*Sin(Pitch);
			
			Accel = -Accel;
			Accel *= Dist;
			Accel *= Scale;
			
			
			mo.A_SpawnParticle(ColTmp, Glow, Life+5, (Size+j*3)*CFRandom(.9, 1.1), 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X,Accel.Y,Accel.Z-(j-.1)*.01, 1, 0, -((Size+j*3)/Life));
			Life-=.5*LifeM;
		}
	}
}

Class MR_GoreParticlesEffect_CurveLine: MR_GoreParticlesEffect
{
	Override Void SpawnEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Vector3 Offset, Double LifeM, Double MoVel)
	{
		Amount *= CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0025*CVar.GetCVar("MRGoreParts_Distance", Players[ConsolePlayer]).GetFloat();
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(CVar.GetCVar("MRGoreParts_FullBright", Players[ConsolePlayer]).GetBool())Glow = SPF_FULLBRIGHT;
		
		Pitch -= CRandom(5, 40);
		//Angle += CRandom(-15, 15);
		Double Forw = CFRandom(.01, .2);
		Double Strn = CFRandom(.4, .6);
		Double Size = CFRandom(3.4, 3.7)*Dist;
		Double Life = CFRandom(30, 34)*LifeM;
		Double StartLife = Life;
		
		Double Roll = CRandom(175, 360);
		
		int CircleStart = CFRandom(0, 360);
		float CircleLength = CRandom(120, 270);

		For(float j=CircleStart;j<CircleStart+CircleLength;j+=Size*.75/Amount)
		{
			Double Ang = Angle+(j+CFRandom(-1.5, 1.5))*Cos(Roll);
			Double Pit = Pitch+(j+CFRandom(-1.5, 1.5))*Sin(Roll);
			
			Vector3 Vel = (Actor.AngleToVector(Ang, Strn)*Cos(-Abs(Pit)), -Sin(Pit)*Strn);
			Vel += (Actor.AngleToVector(Angle, Forw)*Cos(Abs(Pitch)), -Sin(Pitch)*Forw);
			Vel.XY += Actor.AngleToVector(Ang, Strn)*Sin(Pit);
			
			Vel *= Scale;
			Vel *= Dist;
			Vel += mo.Vel*moVel;

			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, 1.2+Sin(-Pit)*.5));
			Bright += CFRandom(-.05, .05);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));

			mo.A_SpawnParticle(ColTmp, Glow, Life+5, Size*CFRandom(.9, 1.1), 0, CFRandom(-.5,.5)*Scale,CFRandom(-.5,.5)*Scale,CFRandom(-.5,.5)*Scale,
				Vel.X, Vel.Y, Vel.Z, CFRandom(-.001,.001),CFRandom(-.001,.001),CFRandom(-.001,.001)-.025+Vel.Z*.01 , 1, 0, -(Size/Life));

			Life -= StartLife/(CircleLength/(Size*.75/Amount))*CFRandom(0, .8);
		}
	}
}

Class MR_GoreParticlesEffect_BeautifulSprayGrowing: MR_GoreParticlesEffect
{
	Override Void SpawnEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Vector3 Offset, Double LifeM, Double MoVel)
	{
		Amount *= CVar.GetCVar("MRGoreParts_Amount", Players[ConsolePlayer]).GetFloat();
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0025*CVar.GetCVar("MRGoreParts_Distance", Players[ConsolePlayer]).GetFloat();
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(CVar.GetCVar("MRGoreParts_FullBright", Players[ConsolePlayer]).GetBool())Glow = SPF_FULLBRIGHT;
		
		Pitch -= CFRandom(5, 8);
		Angle += CRandom(-30, 30);
		Double Forw = CFRandom(1.4, 3);
		Vector3 Strn;
		Double Size = CFRandom(1.2, 1.6)*Dist;
		Double Life = CFRandom(35, 40)*LifeM;
							
		For(float j=.1;j<1.1;j+=.05/Amount)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .1*j);
			Strn.X = Forw*j*.25;
			Strn.Y = -Cos(Ang)*Leng;
			Strn.Z = -Sin(Ang)*Leng;
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, (Strn.Z/(.3*j)+.75)*2));
			Bright += CFRandom(-.05, .05);
			
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			Vector3 Accel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Accel *= CFRandom(.01, .02);
			Accel.XY += Actor.AngleToVector(Angle+90, -Strn.Y*.1);
			Accel.XY += Actor.AngleToVector(Angle, -Strn.Z)*Sin(Pitch);
			
			Accel = -Accel;
			Accel *= Dist;
			Accel *= Scale;
			
			mo.A_SpawnParticle(ColTmp, Glow, Life+5, (Size+j*3)*CFRandom(.9, 1.1), 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X,Accel.Y,Accel.Z-(j-.1)*.01, 1, 1.2/Life, ((Size+j*3)/Life)*.05);
			Life-=.5*LifeM;
		}
	}
}