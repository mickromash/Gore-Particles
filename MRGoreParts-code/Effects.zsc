/*
	Effects actors and classes
*/

Class MR_GoreParticlesFlyingBlood: Actor//Quake gibs blood stream
{
	Default{
		+NOINTERACTION
		+Missile
		-SKYEXPLODE
		+DONTSPLASH
		Gravity .3;
		Scale 3;
		Radius 3;
		Height 3;
	}
	
	Color Col;
	Double Fov;
	Bool DrawMe, WasDrawn;
	//Float Brightnes;
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Fov = CVar.FindCVar("FOV").GetFloat();
		
		DrawMe = MRGoreParts_Draw && MRGoreParts_DrawFlyingBlood;
	}
	
	Bool MRGPartsCheckDraw()
	{
		if(!DrawMe)Return false;
		
		Let Plr = Players[ConsolePlayer];
		if(!Plr.Camera)Return true;
		
		if(!CheckSight(Plr.Camera))Return false;
		
		Return abs(DeltaAngle(Plr.Camera.Angle, Plr.Camera.AngleTo(Self)))<FOV;
	}

	States
	{
		Spawn:
			TNT1 A 1{
				Vel.Z -= Gravity;
				if(MRGPartsCheckDraw() && Scale.X>0)
				{
					if(!WasDrawn)WasDrawn = true;
					int Glow = 0;
					if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
					Float Brightnes = CFRandom(MRGP_MinBright, MRGP_MaxBright);
					
					Color CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
					
					Double Dist = 1;
					if(Players[ConsolePlayer].Camera)Max(1, 1+(Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
					
					A_SpawnParticle(CurCol, Glow, 1, Scale.X*Dist, 0, 0,0,0, Vel.X, Vel.Y, Vel.Z, FadeStepF:0);
					
					Vector3 Dif = LevelLocals.Vec3Diff(Pos, Prev);
					
					For(float i=0;i<Dif.Length();i+=Scale.X*.5*Max(1, Dist*.01))
					{
						Float Step = i;
						Step /= Dif.Length();

						Brightnes = CFRandom(MRGP_MinBright, MRGP_MaxBright);
						CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
						
						Float Rand = CFRandom(-Scale.X*.1, Scale.X*.1);
						//Rand = 0;
						A_SpawnParticle(CurCol, Glow, 25, Scale.X*Dist, 0,
							Dif.X*Step+Vel.X*.5+Rand, Dif.Y*Step+Vel.Y*.5+Rand, Dif.Z*Step+Vel.Z*.5+Rand,
							0,0,0,
							0,0,-Gravity*.5,
							1, 0, -Scale.X*.9*.05
						);
					}
				}
				if(WasDrawn && ((Players[ConsolePlayer].Camera&&!CheckSight(Players[ConsolePlayer].Camera)) ||Pos.Z<=FloorZ||Pos.Z>=CeilingZ))
				{
					Let Plr = Players[ConsolePlayer].Camera;
					if(!Plr)Return;
					Bool Wall = Pos.Z>FloorZ && Pos.Z<CeilingZ;
					int Glow = 0;
					if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
					
					if(abs(DeltaAngle(Plr.AngleTo(Self), Plr.Angle))<Fov){
						
						Double Angle, Pitch;
						Angle = VectorAngle(Vel.X, Vel.Y)+180;
						Pitch = -atan2(Vel.Z, Vel.XY.Length())*1.5;
						For(float i=-4;i<5;i++){
							
							Float Brightnes = CFRandom(MRGP_MinBright, MRGP_MaxBright);
							Color CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
							
							Float Force = CFRandom(2, 3);
							Double PPitch = Pitch+Max(0, i)*CFRandom(15, 25);
							if(!Wall)PPitch = Pitch+i*CFRandom(15, 25);
							Vector3 Vel = (AngleToVector(Angle+i*CFRandom(38, 50), Force)*Cos(Abs(PPitch)), Force*Sin(PPitch));
							
							A_SpawnParticle(CurCol, Glow, 15, Scale.X*CFRandom(.6, 1), 0,
								0,0,0,
								Vel.X,Vel.Y,Vel.Z,
								0,0,-.3,
								1, 0, -.075*Scale.X);
						}
					}
					
					if((Pos.Z<=FloorZ || Pos.Z>=CeilingZ) && MRGoreParts_FloorSpots>1)
					{
						int Life = MRGoreParts_SpotsTime;
						For(int i=0;i<4;i++)
						{
							Float Brightnes = CFRandom(MRGP_MinBright, MRGP_MaxBright);
							Color CurCol = Color(int(Col.R*Brightnes), int(Col.G*Brightnes), int(Col.B*Brightnes));
						
							A_SpawnParticle(CurCol, Glow, Life, Scale.X*CFRandom(.5, 1.1), 0, CFRandom(-3, 3), CFRandom(-3, 3), (Pos.Z>=CeilingZ)?-1:1, FadeStepf:0);
						}
					}
					WasDrawn = false;
					Scale.X = 0;
				}
				
				if(GetAge()>35*3)Destroy();
			}
			Wait;
	}
}


enum MRGP_EffectFlag{
	SGPF_NoDist = 1,//Distance won't affect particles velocity and sizes
	SGPF_FixAmount = 2,//Ignore particles amount CVar
	SGPF_NoVel = 4,
};

Class MR_GoreParticlesEffect play Abstract
{
	Virtual Void DoParticleEffect(Actor mo, int Flags = 0, Double Angle = 0, Double Pitch = 0, Color Col = 0, double Amount = 1, Double Scale = 1, Double Alpha = 1, Vector3 Offset = (0,0,0), Double LifeM = 1, Double MoVel = 0)
	{}
	/*
		mo - actor that spawns particles
		Amount - particles amount multiplier
		Flags - check MRGP_EffectFlag enum
		Angle - particles direction angle
		Pitch - particles direction pitch
		Col - particles base color
		Scale - particles sizes multiplier
		Alpha - Alpha multiplier
		Offset - offsets particles spawn point from actor position (absolute)
		LifeM - particles lifetime multiplier
		MoVel - multiplies actor velocity that will be added to particles
	*/
	Static Void SpawnEffect(Class<Object> Effect, Actor mo, int Flags = 0, Double Angle = 0, Double Pitch = 0, Color Col = 0, double Amount = 1, Double Scale = 1, Double Alpha = 1, Vector3 Offset = (0,0,0), Double LifeM = 1, Double MoVel = 0)
	{
		if(!mo)Return;
		MR_GoreParticlesEffect Spawner = MR_GoreParticlesEffect(New(Effect));
		
		if(Spawner){
			Spawner.DoParticleEffect(mo, Flags, Angle, Pitch, Col, Amount, Scale, Alpha, Offset, LifeM, MoVel);
			Spawner.Destroy();
		}
	}
	Clearscope Virtual String GetName(){Return StringTable.Localize("$"..GetClassName());}//Effect name that will be displayedin the menu
	Clearscope Virtual Bool UsesAlpha(){Return false;}
}

Class MR_GoreParticlesEffect_SimpleSplash: MR_GoreParticlesEffect
{
	Override Void DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return;
		
		if(!MRGoreParts_Draw)Return;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		
		Float Mult = (CRandom(1, 3)*3+1)/Max(1, Dist*.1)*Amount;
		
		For(float i1=0;i1<Mult;i1++)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .3);
			Vector3 Strn = (CFRandom(.1, 1), Cos(Ang)*Leng, Sin(Ang)*Leng);
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			Float Life = Min(45, 10/Strn.Length())/MRGoreParts_Speed*LifeM;
			Double Size = CFRandom(.9, 3)*Dist*Scale;
			Vector3 Accel = -Vel*CFRandom(.004, .01);
			
			
			
			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, 1.5+Vel.Z*1.5));
			Bright += CFRandom(-.05, .05);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			Vector3 Ofst = Vel;
			Ofst *= Mult/(i1+1);
			
			mo.A_SpawnParticle(ColTmp, Glow, Life, Size, 0, Ofst.X*CFRandom(.3, .7)+Offset.X,Ofst.Y*CFRandom(.3, .7)+Offset.Y,5+Ofst.Z*CFRandom(.3, .7)+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X, Accel.Y, Accel.Z, 1, 0, -(Size/Life));
		}
	}
}

Class MR_GoreParticlesEffect_Sprays: MR_GoreParticlesEffect
{}

Class MR_GoreParticlesEffect_Mist: MR_GoreParticlesEffect
{
	Override Void DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return;
		
		if(!MRGoreParts_Draw)Return;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		
		int Amnt = CRandom(1, 4)/Max(1, Dist*.1)*2*Amount;
		if(Flags&SGPF_FixAmount)Amnt = Amount;
		
		For(int i=0;i<Amnt;i++)
		{
			Vector2 HorzStrn = (CFRandom(-.2, .2), CFRandom(-.2, .2));
			Vector3 Strn = (CFRandom(.05, .2), HorzStrn.X, HorzStrn.Y);
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z + -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel += mo.Vel*moVel;
			
			Vector3 Accel = -Vel*CFRandom(.004, .01);
			
			Float Life = Min(50, 11/Strn.Length())/MRGoreParts_Speed*LifeM;
			
			Double Size = Scale*(abs(HorzStrn.Length()*20))*Dist;
			if(Flags&SGPF_NoVel)Size = Scale*Dist;
			
			Float Bright = CFRandom(.9, 1.4);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			Double PAlpha = CFRandom(.2, .4);
			if(Alpha!=1)PAlpha = Alpha;
			
			TextureId Texture;
			
			Switch(MRGoreParts_MistTexture)
			{
				Case 0:Texture = Texman.CheckForTexture("GParMst");Break;
				Default: Texture = Texman.CheckForTexture("GParMst"..MRGoreParts_MistTexture);Break;
				Case 3:Texture = Texman.CheckForTexture("glpart");Break;
			}
			
			mo.A_SpawnParticleEx(ColTmp, Texture, STYLE_None, Glow, Life, Size, 0,
				Offset.X,Offset.Y,5+Offset.Z,
				Vel.X,Vel.Y,Vel.Z,
				Accel.X,Accel.Y,Accel.Z,
				PAlpha, PAlpha/Life, Size*MRGoreParts_Speed*.1
			);
		}
	}
	
	Override Bool UsesAlpha(){Return true;}
}

Class MR_GoreParticlesEffect_BeautifulSpray: MR_GoreParticlesEffect
{
	Override Void DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return;
		
		if(!MRGoreParts_Draw)Return;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return;
		
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		
		Pitch -= CFRandom(5, 8);
		Angle += CRandom(-30, 30);
		Double Forw = CFRandom(1.4, 3);
		Vector3 Strn;
		Double Size = CFRandom(1.2, 1.6)*Dist;
		Float Life = CFRandom(35, 40)/MRGoreParts_Speed*LifeM;
							
		For(float j=.1;j<1.1;j+=.05*Max(1, Dist*.1)/Amount)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .1*j);
			Strn.X = Forw*j*.5;
			Strn.Y = -Cos(Ang)*Leng;
			Strn.Z = -Sin(Ang)*Leng;
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			Vector3 Accel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Accel *= CFRandom(.01, .02);
			Accel.XY += Actor.AngleToVector(Angle+90, -Strn.Y*.1);
			Accel.XY += Actor.AngleToVector(Angle, -Strn.Z)*Sin(Pitch);
			
			Accel = -Accel;
			Accel *= Dist;
			Accel *= Scale;
			
			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, (Strn.Z/(.3*j)+.75)*2));
			Bright += CFRandom(-.05, .05);
			
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			
			mo.A_SpawnParticle(ColTmp, Glow, Life+5, (Size+j*3)*CFRandom(.9, 1.1), 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X,Accel.Y,Accel.Z-(j-.1)*.01, 1, 0, -((Size+j*3)/Life));
			Life-=.5/MRGoreParts_Speed*LifeM;
		}
	}
}

Class MR_GoreParticlesEffect_CurveLine: MR_GoreParticlesEffect
{
	Override Void DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return;
		
		if(!MRGoreParts_Draw)Return;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		if(Amount<=0)Return;
		Amount = Min(1.1, Amount);
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		
		Pitch -= CRandom(5, 40);
		//Angle += CRandom(-15, 15);
		Double Forw = CFRandom(.01, .2);
		Double Strn = CFRandom(.4, .6);
		Double Size = CFRandom(3.4, 3.7)*Dist;
		Float Life = CFRandom(30, 34)/MRGoreParts_Speed*LifeM;
		Double StartLife = Life;
		
		Double Roll = CRandom(175, 360);
		
		int CircleStart = CFRandom(0, 360);
		float CircleLength = CRandom(120, 270);

		For(float j=CircleStart;j<CircleStart+CircleLength;j+=Size*.75*Max(1, Dist*.1)/Amount)
		{
			Double Ang = Angle+(j+CFRandom(-1.5, 1.5))*Cos(Roll);
			Double Pit = Pitch+(j+CFRandom(-1.5, 1.5))*Sin(Roll);
			
			Vector3 Vel = (Actor.AngleToVector(Ang, Strn)*Cos(-Abs(Pit)), -Sin(Pit)*Strn);
			Vel += (Actor.AngleToVector(Angle, Forw)*Cos(Abs(Pitch)), -Sin(Pitch)*Forw);
			Vel.XY += Actor.AngleToVector(Ang, Strn)*Sin(Pit);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Scale;
			Vel *= Dist;
			Vel += mo.Vel*moVel;

			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, 1.2+Sin(-Pit)*.5));
			Bright += CFRandom(-.05, .05);
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));

			mo.A_SpawnParticle(ColTmp, Glow, Life+5, Size*CFRandom(.9, 1.1), 0, CFRandom(-.5,.5)*Scale,CFRandom(-.5,.5)*Scale,CFRandom(-.5,.5)*Scale,
				Vel.X, Vel.Y, Vel.Z, CFRandom(-.001,.001),CFRandom(-.001,.001),CFRandom(-.001,.001)-.025+Vel.Z*.01 , 1, 0, -(Size/Life));

			Life -= (StartLife/(CircleLength/(Size*.75/Amount))*CFRandom(0, .8))/MRGoreParts_Speed;
		}
	}
}

Class MR_GoreParticlesEffect_BeautifulSprayGrowing: MR_GoreParticlesEffect
{
	Override Void DoParticleEffect(Actor mo, int Flags, Double Angle, Double Pitch, Color Col, double Amount, Double Scale, Double Alpha, Vector3 Offset, Double LifeM, Double MoVel)
	{
		if(!mo||!Players[ConsolePlayer].Camera)Return;
		
		if(!MRGoreParts_Draw)Return;
		if(!(Flags&SGPF_FixAmount))Amount *= MRGoreParts_Amount;
		Float Dist = MRGP_DistanceMult;
		
		if(Flags&SGPF_NODIST)Dist = 1;
		else
		{
			Dist *= Max(1, 1+(mo.Distance3D(Players[ConsolePlayer].Camera)-80)*.0015*MRGoreParts_Distance);
			if(Scale>1)Dist/=Scale;
		}
		
		int Glow = 0;
		if(MRGoreParts_FullBright)Glow = SPF_FULLBRIGHT;
		
		Pitch -= CFRandom(5, 8);
		Angle += CRandom(-30, 30);
		Double Forw = CFRandom(1.4, 3);
		Vector3 Strn;
		Double Size = CFRandom(1.2, 1.6)*Dist;
		Float Life = CFRandom(35, 40)/MRGoreParts_Speed*LifeM;
							
		For(float j=.1;j<1.1;j+=.05*Max(1, Dist*.1)/Amount)
		{
			Double Ang = CRandom(0, 360);
			Double Leng = CFRandom(0, .1*j);
			Strn.X = Forw*j*.25;
			Strn.Y = -Cos(Ang)*Leng;
			Strn.Z = -Sin(Ang)*Leng;
			Vector3 Vel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Vel.XY += Actor.AngleToVector(Angle+90, Strn.Y);
			Vel.XY += Actor.AngleToVector(Angle, Strn.Z)*Sin(Pitch);
			
			Vel *= MRGoreParts_Speed;
			Vel *= Dist;
			Vel *= Scale;
			Vel += mo.Vel*moVel;
			
			Vector3 Accel = (Actor.AngleToVector(Angle, Strn.X)*Cos(Abs(Pitch)), Abs(Cos(Pitch))*Strn.Z -Sin(Pitch)*Strn.X);
			Accel *= CFRandom(.01, .02);
			Accel.XY += Actor.AngleToVector(Angle+90, -Strn.Y*.1);
			Accel.XY += Actor.AngleToVector(Angle, -Strn.Z)*Sin(Pitch);
			
			Accel = -Accel;
			Accel *= Dist;
			Accel *= Scale;
			
			Float Bright = Max(MRGP_MinBright, Min(MRGP_MaxBright, (Strn.Z/(.3*j)+.75)*2));
			Bright += CFRandom(-.05, .05);
			
			Color ColTmp = Color(int(Col.R*Bright), int(Col.G*Bright), int(Col.B*Bright));
			
			mo.A_SpawnParticle(ColTmp, Glow, Life+5, (Size+j*3)*CFRandom(.9, 1.1), 0, Vel.X*j+Offset.X, Vel.Y*j+Offset.Y, 5+Vel.Z*j+Offset.Z,
				Vel.X, Vel.Y, Vel.Z, Accel.X,Accel.Y,Accel.Z-(j-.1)*.01, 1, 1.2/Life, ((Size+j*3)/Life)*.05);
			Life-=.5/MRGoreParts_Speed*LifeM;
		}
	}
	
	Override Bool UsesAlpha(){Return true;}
}